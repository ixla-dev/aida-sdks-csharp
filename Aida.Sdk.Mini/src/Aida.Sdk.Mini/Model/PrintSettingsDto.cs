/*
 * aida-mini
 *
 * 1.0.703.2
 *
 * The version of the OpenAPI document: 1.0.703.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Mini.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Mini.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Mini.Model
{
    /// <summary>
    /// PrintSettingsDto
    /// </summary>
    [DataContract(Name = "PrintSettingsDto")]
    public partial class PrintSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintSettingsDto" /> class.
        /// </summary>
        /// <param name="jobTemplateInkjetLayoutId">jobTemplateInkjetLayoutId.</param>
        /// <param name="id">id.</param>
        /// <param name="printSpeed">printSpeed.</param>
        /// <param name="verticalMirrorEnabled">verticalMirrorEnabled.</param>
        /// <param name="horizontalMirrorEnabled">horizontalMirrorEnabled.</param>
        /// <param name="cmykDirectEnabled">cmykDirectEnabled.</param>
        /// <param name="enableC">enableC.</param>
        /// <param name="enableM">enableM.</param>
        /// <param name="enableY">enableY.</param>
        /// <param name="enableK">enableK.</param>
        /// <param name="dropSize">dropSize.</param>
        /// <param name="multipass">multipass.</param>
        /// <param name="numberOfPasses">numberOfPasses.</param>
        /// <param name="dataPageId">dataPageId.</param>
        public PrintSettingsDto(int? jobTemplateInkjetLayoutId = default(int?), int id = default(int), int printSpeed = default(int), bool verticalMirrorEnabled = default(bool), bool horizontalMirrorEnabled = default(bool), bool cmykDirectEnabled = default(bool), bool enableC = default(bool), bool enableM = default(bool), bool enableY = default(bool), bool enableK = default(bool), int dropSize = default(int), bool multipass = default(bool), int numberOfPasses = default(int), int dataPageId = default(int))
        {
            this.JobTemplateInkjetLayoutId = jobTemplateInkjetLayoutId;
            this.Id = id;
            this.PrintSpeed = printSpeed;
            this.VerticalMirrorEnabled = verticalMirrorEnabled;
            this.HorizontalMirrorEnabled = horizontalMirrorEnabled;
            this.CmykDirectEnabled = cmykDirectEnabled;
            this.EnableC = enableC;
            this.EnableM = enableM;
            this.EnableY = enableY;
            this.EnableK = enableK;
            this.DropSize = dropSize;
            this.Multipass = multipass;
            this.NumberOfPasses = numberOfPasses;
            this.DataPageId = dataPageId;
        }

        /// <summary>
        /// Gets or Sets JobTemplateInkjetLayoutId
        /// </summary>
        [DataMember(Name = "jobTemplateInkjetLayoutId", EmitDefaultValue = true)]
        public int? JobTemplateInkjetLayoutId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets PrintSpeed
        /// </summary>
        [DataMember(Name = "printSpeed", EmitDefaultValue = false)]
        public int PrintSpeed { get; set; }

        /// <summary>
        /// Gets or Sets VerticalMirrorEnabled
        /// </summary>
        [DataMember(Name = "verticalMirrorEnabled", EmitDefaultValue = true)]
        public bool VerticalMirrorEnabled { get; set; }

        /// <summary>
        /// Gets or Sets HorizontalMirrorEnabled
        /// </summary>
        [DataMember(Name = "horizontalMirrorEnabled", EmitDefaultValue = true)]
        public bool HorizontalMirrorEnabled { get; set; }

        /// <summary>
        /// Gets or Sets CmykDirectEnabled
        /// </summary>
        [DataMember(Name = "cmykDirectEnabled", EmitDefaultValue = true)]
        public bool CmykDirectEnabled { get; set; }

        /// <summary>
        /// Gets or Sets EnableC
        /// </summary>
        [DataMember(Name = "enableC", EmitDefaultValue = true)]
        public bool EnableC { get; set; }

        /// <summary>
        /// Gets or Sets EnableM
        /// </summary>
        [DataMember(Name = "enableM", EmitDefaultValue = true)]
        public bool EnableM { get; set; }

        /// <summary>
        /// Gets or Sets EnableY
        /// </summary>
        [DataMember(Name = "enableY", EmitDefaultValue = true)]
        public bool EnableY { get; set; }

        /// <summary>
        /// Gets or Sets EnableK
        /// </summary>
        [DataMember(Name = "enableK", EmitDefaultValue = true)]
        public bool EnableK { get; set; }

        /// <summary>
        /// Gets or Sets DropSize
        /// </summary>
        [DataMember(Name = "dropSize", EmitDefaultValue = false)]
        public int DropSize { get; set; }

        /// <summary>
        /// Gets or Sets Multipass
        /// </summary>
        [DataMember(Name = "multipass", EmitDefaultValue = true)]
        public bool Multipass { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfPasses
        /// </summary>
        [DataMember(Name = "numberOfPasses", EmitDefaultValue = false)]
        public int NumberOfPasses { get; set; }

        /// <summary>
        /// Gets or Sets DataPageId
        /// </summary>
        [DataMember(Name = "dataPageId", EmitDefaultValue = false)]
        public int DataPageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrintSettingsDto {\n");
            sb.Append("  JobTemplateInkjetLayoutId: ").Append(JobTemplateInkjetLayoutId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PrintSpeed: ").Append(PrintSpeed).Append("\n");
            sb.Append("  VerticalMirrorEnabled: ").Append(VerticalMirrorEnabled).Append("\n");
            sb.Append("  HorizontalMirrorEnabled: ").Append(HorizontalMirrorEnabled).Append("\n");
            sb.Append("  CmykDirectEnabled: ").Append(CmykDirectEnabled).Append("\n");
            sb.Append("  EnableC: ").Append(EnableC).Append("\n");
            sb.Append("  EnableM: ").Append(EnableM).Append("\n");
            sb.Append("  EnableY: ").Append(EnableY).Append("\n");
            sb.Append("  EnableK: ").Append(EnableK).Append("\n");
            sb.Append("  DropSize: ").Append(DropSize).Append("\n");
            sb.Append("  Multipass: ").Append(Multipass).Append("\n");
            sb.Append("  NumberOfPasses: ").Append(NumberOfPasses).Append("\n");
            sb.Append("  DataPageId: ").Append(DataPageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
