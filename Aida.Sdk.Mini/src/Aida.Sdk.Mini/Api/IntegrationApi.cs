/*
 * aida-mini
 *
 * 1.0.704.0
 *
 * The version of the OpenAPI document: 1.0.704.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Aida.Sdk.Mini.Client;
using Aida.Sdk.Mini.Model;

namespace Aida.Sdk.Mini.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIntegrationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="createJobTemplateDto"> (optional)</param>
        /// <returns>JobTemplateDto</returns>
        JobTemplateDto CreateJobTemplate(string scannerId = default(string), CreateJobTemplateDto createJobTemplateDto = default(CreateJobTemplateDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="createJobTemplateDto"> (optional)</param>
        /// <returns>ApiResponse of JobTemplateDto</returns>
        ApiResponse<JobTemplateDto> CreateJobTemplateWithHttpInfo(string scannerId = default(string), CreateJobTemplateDto createJobTemplateDto = default(CreateJobTemplateDto));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <returns>WebhooksTargetDto</returns>
        WebhooksTargetDto CreateWebhooksTarget(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <returns>ApiResponse of WebhooksTargetDto</returns>
        ApiResponse<WebhooksTargetDto> CreateWebhooksTargetWithHttpInfo(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteInkjetLayout(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInkjetLayoutWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns></returns>
        void DeleteJobTemplate(int id, string scannerId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobTemplateWithHttpInfo(int id, string scannerId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns></returns>
        void DeleteLayout(int id, string scannerId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLayoutWithHttpInfo(int id, string scannerId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>WebhooksTargetDto</returns>
        WebhooksTargetDto DeleteWebhooksTarget(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of WebhooksTargetDto</returns>
        ApiResponse<WebhooksTargetDto> DeleteWebhooksTargetWithHttpInfo(int id);
        /// <summary>
        /// AIDA Server invokes ScEstablishContext on startup. If for any reason the current context becomes invalid (usb cable  disconnected for example) you can use this endpoint to re-establish a new PcScContext.
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sCardEstablishContextParamsDto"> (optional)</param>
        /// <returns></returns>
        void EstablishContext(SCardEstablishContextParamsDto sCardEstablishContextParamsDto = default(SCardEstablishContextParamsDto));

        /// <summary>
        /// AIDA Server invokes ScEstablishContext on startup. If for any reason the current context becomes invalid (usb cable  disconnected for example) you can use this endpoint to re-establish a new PcScContext.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sCardEstablishContextParamsDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EstablishContextWithHttpInfo(SCardEstablishContextParamsDto sCardEstablishContextParamsDto = default(SCardEstablishContextParamsDto));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>SearchInkjetLayoutsResultDto</returns>
        SearchInkjetLayoutsResultDto FindInkjetLayouts(bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of SearchInkjetLayoutsResultDto</returns>
        ApiResponse<SearchInkjetLayoutsResultDto> FindInkjetLayoutsWithHttpInfo(bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeLayouts"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>SearchJobTemplatesResultDto</returns>
        SearchJobTemplatesResultDto FindJobTemplates(string scannerId = default(string), bool? includeLayouts = default(bool?), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeLayouts"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of SearchJobTemplatesResultDto</returns>
        ApiResponse<SearchJobTemplatesResultDto> FindJobTemplatesWithHttpInfo(string scannerId = default(string), bool? includeLayouts = default(bool?), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>SearchLayoutsResultDto</returns>
        SearchLayoutsResultDto FindLayouts(string scannerId = default(string), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of SearchLayoutsResultDto</returns>
        ApiResponse<SearchLayoutsResultDto> FindLayoutsWithHttpInfo(string scannerId = default(string), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>SearchWebhooksTargetsResultDto</returns>
        SearchWebhooksTargetsResultDto FindWebhooksTargets(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of SearchWebhooksTargetsResultDto</returns>
        ApiResponse<SearchWebhooksTargetsResultDto> FindWebhooksTargetsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <returns>SearchInkjetLayoutsResultDto</returns>
        SearchInkjetLayoutsResultDto GetAssignableInkjetLayoutsByJobTemplateId(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <returns>ApiResponse of SearchInkjetLayoutsResultDto</returns>
        ApiResponse<SearchInkjetLayoutsResultDto> GetAssignableInkjetLayoutsByJobTemplateIdWithHttpInfo(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <returns>SearchLayoutsResultDto</returns>
        SearchLayoutsResultDto GetAssignableLayoutsByJobTemplateId(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <returns>ApiResponse of SearchLayoutsResultDto</returns>
        ApiResponse<SearchLayoutsResultDto> GetAssignableLayoutsByJobTemplateIdWithHttpInfo(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <returns>SearchJobLayoutsResultDto</returns>
        SearchJobLayoutsResultDto GetAssignedLayoutsByJobTemplateId(int id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <returns>ApiResponse of SearchJobLayoutsResultDto</returns>
        ApiResponse<SearchJobLayoutsResultDto> GetAssignedLayoutsByJobTemplateIdWithHttpInfo(int id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>DataExchangeTableDefinition</returns>
        DataExchangeTableDefinition GetDataExchangeTableDefinition(int jobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of DataExchangeTableDefinition</returns>
        ApiResponse<DataExchangeTableDefinition> GetDataExchangeTableDefinitionWithHttpInfo(int jobId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>List&lt;EntityDescriptor&gt;</returns>
        List<EntityDescriptor> GetEntityDescriptorsByJobTemplateId(int jobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of List&lt;EntityDescriptor&gt;</returns>
        ApiResponse<List<EntityDescriptor>> GetEntityDescriptorsByJobTemplateIdWithHttpInfo(int jobId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>List&lt;JobInstance&gt;</returns>
        List<JobInstance> GetJobInstances(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of List&lt;JobInstance&gt;</returns>
        ApiResponse<List<JobInstance>> GetJobInstancesWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns>JobTemplateDto</returns>
        JobTemplateDto GetJobTemplateById(int id, string scannerId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns>ApiResponse of JobTemplateDto</returns>
        ApiResponse<JobTemplateDto> GetJobTemplateByIdWithHttpInfo(int id, string scannerId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns>LayoutDto</returns>
        LayoutDto GetLayoutById(int id, string scannerId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns>ApiResponse of LayoutDto</returns>
        ApiResponse<LayoutDto> GetLayoutByIdWithHttpInfo(int id, string scannerId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RuntimeMetrics</returns>
        RuntimeMetrics GetMetrics();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RuntimeMetrics</returns>
        ApiResponse<RuntimeMetrics> GetMetricsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;int&gt;</returns>
        List<int> GetQueuedJobs();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> GetQueuedJobsWithHttpInfo();
        /// <summary>
        /// Return the list of available readers
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <returns>SCardReader</returns>
        SCardReader GetReader(int readerIndex);

        /// <summary>
        /// Return the list of available readers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <returns>ApiResponse of SCardReader</returns>
        ApiResponse<SCardReader> GetReaderWithHttpInfo(int readerIndex);
        /// <summary>
        /// Return the list of available readers
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SCardReader&gt;</returns>
        List<SCardReader> GetReaders();

        /// <summary>
        /// Return the list of available readers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SCardReader&gt;</returns>
        ApiResponse<List<SCardReader>> GetReadersWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WorkflowInstanceSummaryModel&gt;</returns>
        List<WorkflowInstanceSummaryModel> GetRunningWorkflows();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WorkflowInstanceSummaryModel&gt;</returns>
        ApiResponse<List<WorkflowInstanceSummaryModel>> GetRunningWorkflowsWithHttpInfo();
        /// <summary>
        /// Invokes SCardConnect on the specified reader and tries to read the ATR  from the card currently present in the reader
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <returns>byte[]</returns>
        byte[] GetSmartCardAtr(int readerIndex);

        /// <summary>
        /// Invokes SCardConnect on the specified reader and tries to read the ATR  from the card currently present in the reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetSmartCardAtrWithHttpInfo(int readerIndex);
        /// <summary>
        /// Invoke SCardStatus on the specified reader
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <returns>SCardState</returns>
        SCardState GetSmartCardStatus(int readerIndex);

        /// <summary>
        /// Invoke SCardStatus on the specified reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <returns>ApiResponse of SCardState</returns>
        ApiResponse<SCardState> GetSmartCardStatusWithHttpInfo(int readerIndex);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemInfoStatusDto</returns>
        SystemInfoStatusDto GetSystemInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemInfoStatusDto</returns>
        ApiResponse<SystemInfoStatusDto> GetSystemInfoWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemStatusDto</returns>
        SystemStatusDto GetSystemStatus();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemStatusDto</returns>
        ApiResponse<SystemStatusDto> GetSystemStatusWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>WebhooksTargetDto</returns>
        WebhooksTargetDto GetWebhooksTargetById(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of WebhooksTargetDto</returns>
        ApiResponse<WebhooksTargetDto> GetWebhooksTargetByIdWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WorkflowBlueprintSummaryModelPagedList</returns>
        WorkflowBlueprintSummaryModelPagedList GetWorkflowRegistry();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WorkflowBlueprintSummaryModelPagedList</returns>
        ApiResponse<WorkflowBlueprintSummaryModelPagedList> GetWorkflowRegistryWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WorkflowSchedulerStateDto</returns>
        WorkflowSchedulerStateDto GetWorkflowSchedulerState();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WorkflowSchedulerStateDto</returns>
        ApiResponse<WorkflowSchedulerStateDto> GetWorkflowSchedulerStateWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <returns>LayoutDto</returns>
        LayoutDto ImportLayoutFile(string scannerId = default(string), string layoutName = default(string), string filename = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <returns>ApiResponse of LayoutDto</returns>
        ApiResponse<LayoutDto> ImportLayoutFileWithHttpInfo(string scannerId = default(string), string layoutName = default(string), string filename = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <returns></returns>
        void ImportLayoutFileValidation(string layoutName = default(string), string filename = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportLayoutFileValidationWithHttpInfo(string layoutName = default(string), string filename = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ReleaseContext();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReleaseContextWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>InkjetLayoutDto</returns>
        InkjetLayoutDto RenameInkjetLayout(int id, string name = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of InkjetLayoutDto</returns>
        ApiResponse<InkjetLayoutDto> RenameInkjetLayoutWithHttpInfo(int id, string name = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>LayoutDto</returns>
        LayoutDto RenameLayout(int id, string name = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of LayoutDto</returns>
        ApiResponse<LayoutDto> RenameLayoutWithHttpInfo(int id, string name = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;JobInstance&gt;</returns>
        List<JobInstance> ResumeWorkflowScheduler();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;JobInstance&gt;</returns>
        ApiResponse<List<JobInstance>> ResumeWorkflowSchedulerWithHttpInfo();
        /// <summary>
        /// Notifies a suspended workflow instance when that the external process has completed execution
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitForCompletion">If true, the server will respond once the workflow enters the completed/faulted state (optional, default to false)</param>
        /// <param name="externalProcessCompletedMessage">The External process completed message payload (optional)</param>
        /// <returns>List&lt;JobInstance&gt;</returns>
        List<JobInstance> SignalExternalProcessCompleted(bool? waitForCompletion = default(bool?), ExternalProcessCompletedMessage externalProcessCompletedMessage = default(ExternalProcessCompletedMessage));

        /// <summary>
        /// Notifies a suspended workflow instance when that the external process has completed execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitForCompletion">If true, the server will respond once the workflow enters the completed/faulted state (optional, default to false)</param>
        /// <param name="externalProcessCompletedMessage">The External process completed message payload (optional)</param>
        /// <returns>ApiResponse of List&lt;JobInstance&gt;</returns>
        ApiResponse<List<JobInstance>> SignalExternalProcessCompletedWithHttpInfo(bool? waitForCompletion = default(bool?), ExternalProcessCompletedMessage externalProcessCompletedMessage = default(ExternalProcessCompletedMessage));
        /// <summary>
        /// Invoke SCardConnect on the specified reader. The card handle (hCard) is held server side  until the next time Connect is invoked
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardConnectParamsDto"> (optional)</param>
        /// <returns>PcScConnectResult</returns>
        PcScConnectResult SmartCardConnect(int readerIndex, SCardConnectParamsDto sCardConnectParamsDto = default(SCardConnectParamsDto));

        /// <summary>
        /// Invoke SCardConnect on the specified reader. The card handle (hCard) is held server side  until the next time Connect is invoked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardConnectParamsDto"> (optional)</param>
        /// <returns>ApiResponse of PcScConnectResult</returns>
        ApiResponse<PcScConnectResult> SmartCardConnectWithHttpInfo(int readerIndex, SCardConnectParamsDto sCardConnectParamsDto = default(SCardConnectParamsDto));
        /// <summary>
        /// Invoke SCardDisconnect on the specified reader
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardDisconnectParamsDto"> (optional)</param>
        /// <returns>PCSCActionResultDto</returns>
        PCSCActionResultDto SmartCardDisconnect(int readerIndex, SCardDisconnectParamsDto sCardDisconnectParamsDto = default(SCardDisconnectParamsDto));

        /// <summary>
        /// Invoke SCardDisconnect on the specified reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardDisconnectParamsDto"> (optional)</param>
        /// <returns>ApiResponse of PCSCActionResultDto</returns>
        ApiResponse<PCSCActionResultDto> SmartCardDisconnectWithHttpInfo(int readerIndex, SCardDisconnectParamsDto sCardDisconnectParamsDto = default(SCardDisconnectParamsDto));
        /// <summary>
        /// Invoke SCardReconnect on the specified reader
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardReconnectParamsDto"> (optional)</param>
        /// <returns></returns>
        void SmartCardReconnect(int readerIndex, SCardReconnectParamsDto sCardReconnectParamsDto = default(SCardReconnectParamsDto));

        /// <summary>
        /// Invoke SCardReconnect on the specified reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardReconnectParamsDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SmartCardReconnectWithHttpInfo(int readerIndex, SCardReconnectParamsDto sCardReconnectParamsDto = default(SCardReconnectParamsDto));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSchedulerStartupParamsDto"> (optional)</param>
        /// <returns>WorkflowSchedulerStateDto</returns>
        WorkflowSchedulerStateDto StartWorkflowScheduler(WorkflowSchedulerStartupParamsDto workflowSchedulerStartupParamsDto = default(WorkflowSchedulerStartupParamsDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSchedulerStartupParamsDto"> (optional)</param>
        /// <returns>ApiResponse of WorkflowSchedulerStateDto</returns>
        ApiResponse<WorkflowSchedulerStateDto> StartWorkflowSchedulerWithHttpInfo(WorkflowSchedulerStartupParamsDto workflowSchedulerStartupParamsDto = default(WorkflowSchedulerStartupParamsDto));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAllRunningWorkflows"> (optional, default to false)</param>
        /// <param name="errorCode"> (optional)</param>
        /// <returns>WorkflowSchedulerStateDto</returns>
        WorkflowSchedulerStateDto StopWorkflowScheduler(bool? stopAllRunningWorkflows = default(bool?), JobErrorCodes? errorCode = default(JobErrorCodes?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAllRunningWorkflows"> (optional, default to false)</param>
        /// <param name="errorCode"> (optional)</param>
        /// <returns>ApiResponse of WorkflowSchedulerStateDto</returns>
        ApiResponse<WorkflowSchedulerStateDto> StopWorkflowSchedulerWithHttpInfo(bool? stopAllRunningWorkflows = default(bool?), JobErrorCodes? errorCode = default(JobErrorCodes?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemStatusDto</returns>
        SystemStatusDto SystemReset();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemStatusDto</returns>
        ApiResponse<SystemStatusDto> SystemResetWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>WebhookTargetTestResultDto</returns>
        WebhookTargetTestResultDto TestWebhookTarget(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of WebhookTargetTestResultDto</returns>
        ApiResponse<WebhookTargetTestResultDto> TestWebhookTargetWithHttpInfo(int id);
        /// <summary>
        /// Invoke SCardTransmit on the specified reader
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex">The reader id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>byte[]</returns>
        byte[] Transmit(int readerIndex, byte[] body = default(byte[]));

        /// <summary>
        /// Invoke SCardTransmit on the specified reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex">The reader id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> TransmitWithHttpInfo(int readerIndex, byte[] body = default(byte[]));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <returns>WebhooksTargetDto</returns>
        WebhooksTargetDto UpdateWebhooksTarget(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <returns>ApiResponse of WebhooksTargetDto</returns>
        ApiResponse<WebhooksTargetDto> UpdateWebhooksTargetWithHttpInfo(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>LayoutDto</returns>
        LayoutDto UploadLayoutFile(string layoutName = default(string), string supportSide = default(string), string scannerId = default(string), List<FileParameter> files = default(List<FileParameter>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResponse of LayoutDto</returns>
        ApiResponse<LayoutDto> UploadLayoutFileWithHttpInfo(string layoutName = default(string), string supportSide = default(string), string scannerId = default(string), List<FileParameter> files = default(List<FileParameter>));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>NameValidationResultDto</returns>
        NameValidationResultDto ValidateInkjetLayoutName(string scannerId = default(string), string body = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of NameValidationResultDto</returns>
        ApiResponse<NameValidationResultDto> ValidateInkjetLayoutNameWithHttpInfo(string scannerId = default(string), string body = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>NameValidationResultDto</returns>
        NameValidationResultDto ValidateJobTemplateName(string scannerId = default(string), string body = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of NameValidationResultDto</returns>
        ApiResponse<NameValidationResultDto> ValidateJobTemplateNameWithHttpInfo(string scannerId = default(string), string body = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>NameValidationResultDto</returns>
        NameValidationResultDto ValidateLayoutName(string scannerId = default(string), string body = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of NameValidationResultDto</returns>
        ApiResponse<NameValidationResultDto> ValidateLayoutNameWithHttpInfo(string scannerId = default(string), string body = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIntegrationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="createJobTemplateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobTemplateDto</returns>
        System.Threading.Tasks.Task<JobTemplateDto> CreateJobTemplateAsync(string scannerId = default(string), CreateJobTemplateDto createJobTemplateDto = default(CreateJobTemplateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="createJobTemplateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobTemplateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobTemplateDto>> CreateJobTemplateWithHttpInfoAsync(string scannerId = default(string), CreateJobTemplateDto createJobTemplateDto = default(CreateJobTemplateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksTargetDto</returns>
        System.Threading.Tasks.Task<WebhooksTargetDto> CreateWebhooksTargetAsync(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksTargetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhooksTargetDto>> CreateWebhooksTargetWithHttpInfoAsync(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInkjetLayoutAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInkjetLayoutWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobTemplateAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobTemplateWithHttpInfoAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLayoutAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLayoutWithHttpInfoAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksTargetDto</returns>
        System.Threading.Tasks.Task<WebhooksTargetDto> DeleteWebhooksTargetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksTargetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhooksTargetDto>> DeleteWebhooksTargetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// AIDA Server invokes ScEstablishContext on startup. If for any reason the current context becomes invalid (usb cable  disconnected for example) you can use this endpoint to re-establish a new PcScContext.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sCardEstablishContextParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EstablishContextAsync(SCardEstablishContextParamsDto sCardEstablishContextParamsDto = default(SCardEstablishContextParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// AIDA Server invokes ScEstablishContext on startup. If for any reason the current context becomes invalid (usb cable  disconnected for example) you can use this endpoint to re-establish a new PcScContext.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sCardEstablishContextParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EstablishContextWithHttpInfoAsync(SCardEstablishContextParamsDto sCardEstablishContextParamsDto = default(SCardEstablishContextParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchInkjetLayoutsResultDto</returns>
        System.Threading.Tasks.Task<SearchInkjetLayoutsResultDto> FindInkjetLayoutsAsync(bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchInkjetLayoutsResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchInkjetLayoutsResultDto>> FindInkjetLayoutsWithHttpInfoAsync(bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeLayouts"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchJobTemplatesResultDto</returns>
        System.Threading.Tasks.Task<SearchJobTemplatesResultDto> FindJobTemplatesAsync(string scannerId = default(string), bool? includeLayouts = default(bool?), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeLayouts"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchJobTemplatesResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchJobTemplatesResultDto>> FindJobTemplatesWithHttpInfoAsync(string scannerId = default(string), bool? includeLayouts = default(bool?), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchLayoutsResultDto</returns>
        System.Threading.Tasks.Task<SearchLayoutsResultDto> FindLayoutsAsync(string scannerId = default(string), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchLayoutsResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchLayoutsResultDto>> FindLayoutsWithHttpInfoAsync(string scannerId = default(string), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchWebhooksTargetsResultDto</returns>
        System.Threading.Tasks.Task<SearchWebhooksTargetsResultDto> FindWebhooksTargetsAsync(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchWebhooksTargetsResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchWebhooksTargetsResultDto>> FindWebhooksTargetsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchInkjetLayoutsResultDto</returns>
        System.Threading.Tasks.Task<SearchInkjetLayoutsResultDto> GetAssignableInkjetLayoutsByJobTemplateIdAsync(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchInkjetLayoutsResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchInkjetLayoutsResultDto>> GetAssignableInkjetLayoutsByJobTemplateIdWithHttpInfoAsync(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchLayoutsResultDto</returns>
        System.Threading.Tasks.Task<SearchLayoutsResultDto> GetAssignableLayoutsByJobTemplateIdAsync(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchLayoutsResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchLayoutsResultDto>> GetAssignableLayoutsByJobTemplateIdWithHttpInfoAsync(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchJobLayoutsResultDto</returns>
        System.Threading.Tasks.Task<SearchJobLayoutsResultDto> GetAssignedLayoutsByJobTemplateIdAsync(int id, int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchJobLayoutsResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchJobLayoutsResultDto>> GetAssignedLayoutsByJobTemplateIdWithHttpInfoAsync(int id, int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataExchangeTableDefinition</returns>
        System.Threading.Tasks.Task<DataExchangeTableDefinition> GetDataExchangeTableDefinitionAsync(int jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataExchangeTableDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataExchangeTableDefinition>> GetDataExchangeTableDefinitionWithHttpInfoAsync(int jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EntityDescriptor&gt;</returns>
        System.Threading.Tasks.Task<List<EntityDescriptor>> GetEntityDescriptorsByJobTemplateIdAsync(int jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EntityDescriptor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityDescriptor>>> GetEntityDescriptorsByJobTemplateIdWithHttpInfoAsync(int jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobInstance&gt;</returns>
        System.Threading.Tasks.Task<List<JobInstance>> GetJobInstancesAsync(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobInstance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobInstance>>> GetJobInstancesWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobTemplateDto</returns>
        System.Threading.Tasks.Task<JobTemplateDto> GetJobTemplateByIdAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobTemplateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobTemplateDto>> GetJobTemplateByIdWithHttpInfoAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LayoutDto</returns>
        System.Threading.Tasks.Task<LayoutDto> GetLayoutByIdAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LayoutDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutDto>> GetLayoutByIdWithHttpInfoAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuntimeMetrics</returns>
        System.Threading.Tasks.Task<RuntimeMetrics> GetMetricsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuntimeMetrics)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuntimeMetrics>> GetMetricsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> GetQueuedJobsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> GetQueuedJobsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the list of available readers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCardReader</returns>
        System.Threading.Tasks.Task<SCardReader> GetReaderAsync(int readerIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the list of available readers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCardReader)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCardReader>> GetReaderWithHttpInfoAsync(int readerIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the list of available readers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCardReader&gt;</returns>
        System.Threading.Tasks.Task<List<SCardReader>> GetReadersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the list of available readers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCardReader&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SCardReader>>> GetReadersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkflowInstanceSummaryModel&gt;</returns>
        System.Threading.Tasks.Task<List<WorkflowInstanceSummaryModel>> GetRunningWorkflowsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowInstanceSummaryModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkflowInstanceSummaryModel>>> GetRunningWorkflowsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invokes SCardConnect on the specified reader and tries to read the ATR  from the card currently present in the reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetSmartCardAtrAsync(int readerIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invokes SCardConnect on the specified reader and tries to read the ATR  from the card currently present in the reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetSmartCardAtrWithHttpInfoAsync(int readerIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invoke SCardStatus on the specified reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCardState</returns>
        System.Threading.Tasks.Task<SCardState> GetSmartCardStatusAsync(int readerIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invoke SCardStatus on the specified reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCardState)</returns>
        System.Threading.Tasks.Task<ApiResponse<SCardState>> GetSmartCardStatusWithHttpInfoAsync(int readerIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemInfoStatusDto</returns>
        System.Threading.Tasks.Task<SystemInfoStatusDto> GetSystemInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemInfoStatusDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemInfoStatusDto>> GetSystemInfoWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemStatusDto</returns>
        System.Threading.Tasks.Task<SystemStatusDto> GetSystemStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemStatusDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemStatusDto>> GetSystemStatusWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksTargetDto</returns>
        System.Threading.Tasks.Task<WebhooksTargetDto> GetWebhooksTargetByIdAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksTargetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhooksTargetDto>> GetWebhooksTargetByIdWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowBlueprintSummaryModelPagedList</returns>
        System.Threading.Tasks.Task<WorkflowBlueprintSummaryModelPagedList> GetWorkflowRegistryAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowBlueprintSummaryModelPagedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowBlueprintSummaryModelPagedList>> GetWorkflowRegistryWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowSchedulerStateDto</returns>
        System.Threading.Tasks.Task<WorkflowSchedulerStateDto> GetWorkflowSchedulerStateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowSchedulerStateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowSchedulerStateDto>> GetWorkflowSchedulerStateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LayoutDto</returns>
        System.Threading.Tasks.Task<LayoutDto> ImportLayoutFileAsync(string scannerId = default(string), string layoutName = default(string), string filename = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LayoutDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutDto>> ImportLayoutFileWithHttpInfoAsync(string scannerId = default(string), string layoutName = default(string), string filename = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportLayoutFileValidationAsync(string layoutName = default(string), string filename = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportLayoutFileValidationWithHttpInfoAsync(string layoutName = default(string), string filename = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReleaseContextAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReleaseContextWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InkjetLayoutDto</returns>
        System.Threading.Tasks.Task<InkjetLayoutDto> RenameInkjetLayoutAsync(int id, string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InkjetLayoutDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InkjetLayoutDto>> RenameInkjetLayoutWithHttpInfoAsync(int id, string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LayoutDto</returns>
        System.Threading.Tasks.Task<LayoutDto> RenameLayoutAsync(int id, string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LayoutDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutDto>> RenameLayoutWithHttpInfoAsync(int id, string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobInstance&gt;</returns>
        System.Threading.Tasks.Task<List<JobInstance>> ResumeWorkflowSchedulerAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobInstance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobInstance>>> ResumeWorkflowSchedulerWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Notifies a suspended workflow instance when that the external process has completed execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitForCompletion">If true, the server will respond once the workflow enters the completed/faulted state (optional, default to false)</param>
        /// <param name="externalProcessCompletedMessage">The External process completed message payload (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobInstance&gt;</returns>
        System.Threading.Tasks.Task<List<JobInstance>> SignalExternalProcessCompletedAsync(bool? waitForCompletion = default(bool?), ExternalProcessCompletedMessage externalProcessCompletedMessage = default(ExternalProcessCompletedMessage), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Notifies a suspended workflow instance when that the external process has completed execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitForCompletion">If true, the server will respond once the workflow enters the completed/faulted state (optional, default to false)</param>
        /// <param name="externalProcessCompletedMessage">The External process completed message payload (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobInstance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobInstance>>> SignalExternalProcessCompletedWithHttpInfoAsync(bool? waitForCompletion = default(bool?), ExternalProcessCompletedMessage externalProcessCompletedMessage = default(ExternalProcessCompletedMessage), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invoke SCardConnect on the specified reader. The card handle (hCard) is held server side  until the next time Connect is invoked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardConnectParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PcScConnectResult</returns>
        System.Threading.Tasks.Task<PcScConnectResult> SmartCardConnectAsync(int readerIndex, SCardConnectParamsDto sCardConnectParamsDto = default(SCardConnectParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invoke SCardConnect on the specified reader. The card handle (hCard) is held server side  until the next time Connect is invoked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardConnectParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PcScConnectResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PcScConnectResult>> SmartCardConnectWithHttpInfoAsync(int readerIndex, SCardConnectParamsDto sCardConnectParamsDto = default(SCardConnectParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invoke SCardDisconnect on the specified reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardDisconnectParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PCSCActionResultDto</returns>
        System.Threading.Tasks.Task<PCSCActionResultDto> SmartCardDisconnectAsync(int readerIndex, SCardDisconnectParamsDto sCardDisconnectParamsDto = default(SCardDisconnectParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invoke SCardDisconnect on the specified reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardDisconnectParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PCSCActionResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PCSCActionResultDto>> SmartCardDisconnectWithHttpInfoAsync(int readerIndex, SCardDisconnectParamsDto sCardDisconnectParamsDto = default(SCardDisconnectParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invoke SCardReconnect on the specified reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardReconnectParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SmartCardReconnectAsync(int readerIndex, SCardReconnectParamsDto sCardReconnectParamsDto = default(SCardReconnectParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invoke SCardReconnect on the specified reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardReconnectParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SmartCardReconnectWithHttpInfoAsync(int readerIndex, SCardReconnectParamsDto sCardReconnectParamsDto = default(SCardReconnectParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSchedulerStartupParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowSchedulerStateDto</returns>
        System.Threading.Tasks.Task<WorkflowSchedulerStateDto> StartWorkflowSchedulerAsync(WorkflowSchedulerStartupParamsDto workflowSchedulerStartupParamsDto = default(WorkflowSchedulerStartupParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSchedulerStartupParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowSchedulerStateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowSchedulerStateDto>> StartWorkflowSchedulerWithHttpInfoAsync(WorkflowSchedulerStartupParamsDto workflowSchedulerStartupParamsDto = default(WorkflowSchedulerStartupParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAllRunningWorkflows"> (optional, default to false)</param>
        /// <param name="errorCode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowSchedulerStateDto</returns>
        System.Threading.Tasks.Task<WorkflowSchedulerStateDto> StopWorkflowSchedulerAsync(bool? stopAllRunningWorkflows = default(bool?), JobErrorCodes? errorCode = default(JobErrorCodes?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAllRunningWorkflows"> (optional, default to false)</param>
        /// <param name="errorCode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowSchedulerStateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowSchedulerStateDto>> StopWorkflowSchedulerWithHttpInfoAsync(bool? stopAllRunningWorkflows = default(bool?), JobErrorCodes? errorCode = default(JobErrorCodes?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemStatusDto</returns>
        System.Threading.Tasks.Task<SystemStatusDto> SystemResetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemStatusDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemStatusDto>> SystemResetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookTargetTestResultDto</returns>
        System.Threading.Tasks.Task<WebhookTargetTestResultDto> TestWebhookTargetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookTargetTestResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookTargetTestResultDto>> TestWebhookTargetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invoke SCardTransmit on the specified reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex">The reader id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> TransmitAsync(int readerIndex, byte[] body = default(byte[]), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invoke SCardTransmit on the specified reader
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex">The reader id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> TransmitWithHttpInfoAsync(int readerIndex, byte[] body = default(byte[]), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksTargetDto</returns>
        System.Threading.Tasks.Task<WebhooksTargetDto> UpdateWebhooksTargetAsync(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksTargetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhooksTargetDto>> UpdateWebhooksTargetWithHttpInfoAsync(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LayoutDto</returns>
        System.Threading.Tasks.Task<LayoutDto> UploadLayoutFileAsync(string layoutName = default(string), string supportSide = default(string), string scannerId = default(string), List<FileParameter> files = default(List<FileParameter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LayoutDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutDto>> UploadLayoutFileWithHttpInfoAsync(string layoutName = default(string), string supportSide = default(string), string scannerId = default(string), List<FileParameter> files = default(List<FileParameter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameValidationResultDto</returns>
        System.Threading.Tasks.Task<NameValidationResultDto> ValidateInkjetLayoutNameAsync(string scannerId = default(string), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameValidationResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NameValidationResultDto>> ValidateInkjetLayoutNameWithHttpInfoAsync(string scannerId = default(string), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameValidationResultDto</returns>
        System.Threading.Tasks.Task<NameValidationResultDto> ValidateJobTemplateNameAsync(string scannerId = default(string), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameValidationResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NameValidationResultDto>> ValidateJobTemplateNameWithHttpInfoAsync(string scannerId = default(string), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameValidationResultDto</returns>
        System.Threading.Tasks.Task<NameValidationResultDto> ValidateLayoutNameAsync(string scannerId = default(string), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameValidationResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NameValidationResultDto>> ValidateLayoutNameWithHttpInfoAsync(string scannerId = default(string), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIntegrationApi : IIntegrationApiSync, IIntegrationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IntegrationApi : IDisposable, IIntegrationApi
    {
        private Aida.Sdk.Mini.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public IntegrationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public IntegrationApi(string basePath)
        {
            this.Configuration = Aida.Sdk.Mini.Client.Configuration.MergeConfigurations(
                Aida.Sdk.Mini.Client.GlobalConfiguration.Instance,
                new Aida.Sdk.Mini.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Aida.Sdk.Mini.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Aida.Sdk.Mini.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public IntegrationApi(Aida.Sdk.Mini.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Aida.Sdk.Mini.Client.Configuration.MergeConfigurations(
                Aida.Sdk.Mini.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Aida.Sdk.Mini.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Aida.Sdk.Mini.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public IntegrationApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public IntegrationApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Aida.Sdk.Mini.Client.Configuration.MergeConfigurations(
                Aida.Sdk.Mini.Client.GlobalConfiguration.Instance,
                new Aida.Sdk.Mini.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Aida.Sdk.Mini.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Aida.Sdk.Mini.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public IntegrationApi(HttpClient client, Aida.Sdk.Mini.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Aida.Sdk.Mini.Client.Configuration.MergeConfigurations(
                Aida.Sdk.Mini.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Aida.Sdk.Mini.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Aida.Sdk.Mini.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public IntegrationApi(Aida.Sdk.Mini.Client.ISynchronousClient client, Aida.Sdk.Mini.Client.IAsynchronousClient asyncClient, Aida.Sdk.Mini.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Aida.Sdk.Mini.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Aida.Sdk.Mini.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Aida.Sdk.Mini.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Aida.Sdk.Mini.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Aida.Sdk.Mini.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aida.Sdk.Mini.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="createJobTemplateDto"> (optional)</param>
        /// <returns>JobTemplateDto</returns>
        public JobTemplateDto CreateJobTemplate(string scannerId = default(string), CreateJobTemplateDto createJobTemplateDto = default(CreateJobTemplateDto))
        {
            Aida.Sdk.Mini.Client.ApiResponse<JobTemplateDto> localVarResponse = CreateJobTemplateWithHttpInfo(scannerId, createJobTemplateDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="createJobTemplateDto"> (optional)</param>
        /// <returns>ApiResponse of JobTemplateDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<JobTemplateDto> CreateJobTemplateWithHttpInfo(string scannerId = default(string), CreateJobTemplateDto createJobTemplateDto = default(CreateJobTemplateDto))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = createJobTemplateDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobTemplateDto>("/aida/v1/scanner/job-templates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJobTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="createJobTemplateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobTemplateDto</returns>
        public async System.Threading.Tasks.Task<JobTemplateDto> CreateJobTemplateAsync(string scannerId = default(string), CreateJobTemplateDto createJobTemplateDto = default(CreateJobTemplateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<JobTemplateDto> localVarResponse = await CreateJobTemplateWithHttpInfoAsync(scannerId, createJobTemplateDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="createJobTemplateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobTemplateDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<JobTemplateDto>> CreateJobTemplateWithHttpInfoAsync(string scannerId = default(string), CreateJobTemplateDto createJobTemplateDto = default(CreateJobTemplateDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = createJobTemplateDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<JobTemplateDto>("/aida/v1/scanner/job-templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJobTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <returns>WebhooksTargetDto</returns>
        public WebhooksTargetDto CreateWebhooksTarget(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto> localVarResponse = CreateWebhooksTargetWithHttpInfo(webhooksTargetDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <returns>ApiResponse of WebhooksTargetDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto> CreateWebhooksTargetWithHttpInfo(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = webhooksTargetDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WebhooksTargetDto>("/aida/v1/webhooks-targets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhooksTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksTargetDto</returns>
        public async System.Threading.Tasks.Task<WebhooksTargetDto> CreateWebhooksTargetAsync(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto> localVarResponse = await CreateWebhooksTargetWithHttpInfoAsync(webhooksTargetDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksTargetDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto>> CreateWebhooksTargetWithHttpInfoAsync(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = webhooksTargetDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WebhooksTargetDto>("/aida/v1/webhooks-targets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhooksTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteInkjetLayout(int id)
        {
            DeleteInkjetLayoutWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<Object> DeleteInkjetLayoutWithHttpInfo(int id)
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/aida/v1/inkjet/layouts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInkjetLayout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInkjetLayoutAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteInkjetLayoutWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<Object>> DeleteInkjetLayoutWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/aida/v1/inkjet/layouts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInkjetLayout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns></returns>
        public void DeleteJobTemplate(int id, string scannerId = default(string))
        {
            DeleteJobTemplateWithHttpInfo(id, scannerId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<Object> DeleteJobTemplateWithHttpInfo(int id, string scannerId = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/aida/v1/scanner/job-templates/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJobTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobTemplateAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteJobTemplateWithHttpInfoAsync(id, scannerId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<Object>> DeleteJobTemplateWithHttpInfoAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/aida/v1/scanner/job-templates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJobTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns></returns>
        public void DeleteLayout(int id, string scannerId = default(string))
        {
            DeleteLayoutWithHttpInfo(id, scannerId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<Object> DeleteLayoutWithHttpInfo(int id, string scannerId = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/aida/v1/scanner/layouts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLayout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLayoutAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteLayoutWithHttpInfoAsync(id, scannerId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<Object>> DeleteLayoutWithHttpInfoAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/aida/v1/scanner/layouts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLayout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>WebhooksTargetDto</returns>
        public WebhooksTargetDto DeleteWebhooksTarget(int id)
        {
            Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto> localVarResponse = DeleteWebhooksTargetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of WebhooksTargetDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto> DeleteWebhooksTargetWithHttpInfo(int id)
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<WebhooksTargetDto>("/aida/v1/webhooks-targets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksTargetDto</returns>
        public async System.Threading.Tasks.Task<WebhooksTargetDto> DeleteWebhooksTargetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto> localVarResponse = await DeleteWebhooksTargetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksTargetDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto>> DeleteWebhooksTargetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<WebhooksTargetDto>("/aida/v1/webhooks-targets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// AIDA Server invokes ScEstablishContext on startup. If for any reason the current context becomes invalid (usb cable  disconnected for example) you can use this endpoint to re-establish a new PcScContext. 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sCardEstablishContextParamsDto"> (optional)</param>
        /// <returns></returns>
        public void EstablishContext(SCardEstablishContextParamsDto sCardEstablishContextParamsDto = default(SCardEstablishContextParamsDto))
        {
            EstablishContextWithHttpInfo(sCardEstablishContextParamsDto);
        }

        /// <summary>
        /// AIDA Server invokes ScEstablishContext on startup. If for any reason the current context becomes invalid (usb cable  disconnected for example) you can use this endpoint to re-establish a new PcScContext. 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sCardEstablishContextParamsDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<Object> EstablishContextWithHttpInfo(SCardEstablishContextParamsDto sCardEstablishContextParamsDto = default(SCardEstablishContextParamsDto))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sCardEstablishContextParamsDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/pcsc-gateway/establish-context", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EstablishContext", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// AIDA Server invokes ScEstablishContext on startup. If for any reason the current context becomes invalid (usb cable  disconnected for example) you can use this endpoint to re-establish a new PcScContext. 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sCardEstablishContextParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EstablishContextAsync(SCardEstablishContextParamsDto sCardEstablishContextParamsDto = default(SCardEstablishContextParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EstablishContextWithHttpInfoAsync(sCardEstablishContextParamsDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// AIDA Server invokes ScEstablishContext on startup. If for any reason the current context becomes invalid (usb cable  disconnected for example) you can use this endpoint to re-establish a new PcScContext. 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sCardEstablishContextParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<Object>> EstablishContextWithHttpInfoAsync(SCardEstablishContextParamsDto sCardEstablishContextParamsDto = default(SCardEstablishContextParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sCardEstablishContextParamsDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/pcsc-gateway/establish-context", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EstablishContext", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>SearchInkjetLayoutsResultDto</returns>
        public SearchInkjetLayoutsResultDto FindInkjetLayouts(bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchInkjetLayoutsResultDto> localVarResponse = FindInkjetLayoutsWithHttpInfo(includeFile, includeEntities, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of SearchInkjetLayoutsResultDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<SearchInkjetLayoutsResultDto> FindInkjetLayoutsWithHttpInfo(bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeFile != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeFile", includeFile));
            }
            if (includeEntities != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeEntities", includeEntities));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchInkjetLayoutsResultDto>("/aida/v1/inkjet/layouts/find", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindInkjetLayouts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchInkjetLayoutsResultDto</returns>
        public async System.Threading.Tasks.Task<SearchInkjetLayoutsResultDto> FindInkjetLayoutsAsync(bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchInkjetLayoutsResultDto> localVarResponse = await FindInkjetLayoutsWithHttpInfoAsync(includeFile, includeEntities, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchInkjetLayoutsResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<SearchInkjetLayoutsResultDto>> FindInkjetLayoutsWithHttpInfoAsync(bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeFile != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeFile", includeFile));
            }
            if (includeEntities != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeEntities", includeEntities));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchInkjetLayoutsResultDto>("/aida/v1/inkjet/layouts/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindInkjetLayouts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeLayouts"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>SearchJobTemplatesResultDto</returns>
        public SearchJobTemplatesResultDto FindJobTemplates(string scannerId = default(string), bool? includeLayouts = default(bool?), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchJobTemplatesResultDto> localVarResponse = FindJobTemplatesWithHttpInfo(scannerId, includeLayouts, includeFile, includeEntities, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeLayouts"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of SearchJobTemplatesResultDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<SearchJobTemplatesResultDto> FindJobTemplatesWithHttpInfo(string scannerId = default(string), bool? includeLayouts = default(bool?), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (includeLayouts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeLayouts", includeLayouts));
            }
            if (includeFile != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeFile", includeFile));
            }
            if (includeEntities != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeEntities", includeEntities));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchJobTemplatesResultDto>("/aida/v1/scanner/job-templates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindJobTemplates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeLayouts"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchJobTemplatesResultDto</returns>
        public async System.Threading.Tasks.Task<SearchJobTemplatesResultDto> FindJobTemplatesAsync(string scannerId = default(string), bool? includeLayouts = default(bool?), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchJobTemplatesResultDto> localVarResponse = await FindJobTemplatesWithHttpInfoAsync(scannerId, includeLayouts, includeFile, includeEntities, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeLayouts"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchJobTemplatesResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<SearchJobTemplatesResultDto>> FindJobTemplatesWithHttpInfoAsync(string scannerId = default(string), bool? includeLayouts = default(bool?), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (includeLayouts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeLayouts", includeLayouts));
            }
            if (includeFile != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeFile", includeFile));
            }
            if (includeEntities != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeEntities", includeEntities));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchJobTemplatesResultDto>("/aida/v1/scanner/job-templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindJobTemplates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>SearchLayoutsResultDto</returns>
        public SearchLayoutsResultDto FindLayouts(string scannerId = default(string), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchLayoutsResultDto> localVarResponse = FindLayoutsWithHttpInfo(scannerId, includeFile, includeEntities, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of SearchLayoutsResultDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<SearchLayoutsResultDto> FindLayoutsWithHttpInfo(string scannerId = default(string), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (includeFile != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeFile", includeFile));
            }
            if (includeEntities != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeEntities", includeEntities));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchLayoutsResultDto>("/aida/v1/scanner/layouts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindLayouts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchLayoutsResultDto</returns>
        public async System.Threading.Tasks.Task<SearchLayoutsResultDto> FindLayoutsAsync(string scannerId = default(string), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchLayoutsResultDto> localVarResponse = await FindLayoutsWithHttpInfoAsync(scannerId, includeFile, includeEntities, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="includeFile"> (optional)</param>
        /// <param name="includeEntities"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchLayoutsResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<SearchLayoutsResultDto>> FindLayoutsWithHttpInfoAsync(string scannerId = default(string), bool? includeFile = default(bool?), bool? includeEntities = default(bool?), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (includeFile != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeFile", includeFile));
            }
            if (includeEntities != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "IncludeEntities", includeEntities));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchLayoutsResultDto>("/aida/v1/scanner/layouts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindLayouts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>SearchWebhooksTargetsResultDto</returns>
        public SearchWebhooksTargetsResultDto FindWebhooksTargets(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchWebhooksTargetsResultDto> localVarResponse = FindWebhooksTargetsWithHttpInfo(page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of SearchWebhooksTargetsResultDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<SearchWebhooksTargetsResultDto> FindWebhooksTargetsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchWebhooksTargetsResultDto>("/aida/v1/webhooks-targets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindWebhooksTargets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchWebhooksTargetsResultDto</returns>
        public async System.Threading.Tasks.Task<SearchWebhooksTargetsResultDto> FindWebhooksTargetsAsync(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchWebhooksTargetsResultDto> localVarResponse = await FindWebhooksTargetsWithHttpInfoAsync(page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchWebhooksTargetsResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<SearchWebhooksTargetsResultDto>> FindWebhooksTargetsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchWebhooksTargetsResultDto>("/aida/v1/webhooks-targets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindWebhooksTargets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <returns>SearchInkjetLayoutsResultDto</returns>
        public SearchInkjetLayoutsResultDto GetAssignableInkjetLayoutsByJobTemplateId(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchInkjetLayoutsResultDto> localVarResponse = GetAssignableInkjetLayoutsByJobTemplateIdWithHttpInfo(id, page, pageSize, supportSide);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <returns>ApiResponse of SearchInkjetLayoutsResultDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<SearchInkjetLayoutsResultDto> GetAssignableInkjetLayoutsByJobTemplateIdWithHttpInfo(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (supportSide != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "supportSide", supportSide));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchInkjetLayoutsResultDto>("/aida/v1/inkjet/job-templates/{id}/layouts/available", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssignableInkjetLayoutsByJobTemplateId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchInkjetLayoutsResultDto</returns>
        public async System.Threading.Tasks.Task<SearchInkjetLayoutsResultDto> GetAssignableInkjetLayoutsByJobTemplateIdAsync(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchInkjetLayoutsResultDto> localVarResponse = await GetAssignableInkjetLayoutsByJobTemplateIdWithHttpInfoAsync(id, page, pageSize, supportSide, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchInkjetLayoutsResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<SearchInkjetLayoutsResultDto>> GetAssignableInkjetLayoutsByJobTemplateIdWithHttpInfoAsync(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (supportSide != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "supportSide", supportSide));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchInkjetLayoutsResultDto>("/aida/v1/inkjet/job-templates/{id}/layouts/available", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssignableInkjetLayoutsByJobTemplateId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <returns>SearchLayoutsResultDto</returns>
        public SearchLayoutsResultDto GetAssignableLayoutsByJobTemplateId(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchLayoutsResultDto> localVarResponse = GetAssignableLayoutsByJobTemplateIdWithHttpInfo(id, page, pageSize, supportSide);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <returns>ApiResponse of SearchLayoutsResultDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<SearchLayoutsResultDto> GetAssignableLayoutsByJobTemplateIdWithHttpInfo(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (supportSide != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "supportSide", supportSide));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchLayoutsResultDto>("/aida/v1/scanner/job-templates/{id}/layouts/available", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssignableLayoutsByJobTemplateId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchLayoutsResultDto</returns>
        public async System.Threading.Tasks.Task<SearchLayoutsResultDto> GetAssignableLayoutsByJobTemplateIdAsync(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchLayoutsResultDto> localVarResponse = await GetAssignableLayoutsByJobTemplateIdWithHttpInfoAsync(id, page, pageSize, supportSide, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchLayoutsResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<SearchLayoutsResultDto>> GetAssignableLayoutsByJobTemplateIdWithHttpInfoAsync(int id, int? page = default(int?), int? pageSize = default(int?), string supportSide = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (supportSide != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "supportSide", supportSide));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchLayoutsResultDto>("/aida/v1/scanner/job-templates/{id}/layouts/available", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssignableLayoutsByJobTemplateId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <returns>SearchJobLayoutsResultDto</returns>
        public SearchJobLayoutsResultDto GetAssignedLayoutsByJobTemplateId(int id, int? page = default(int?), int? pageSize = default(int?))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchJobLayoutsResultDto> localVarResponse = GetAssignedLayoutsByJobTemplateIdWithHttpInfo(id, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <returns>ApiResponse of SearchJobLayoutsResultDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<SearchJobLayoutsResultDto> GetAssignedLayoutsByJobTemplateIdWithHttpInfo(int id, int? page = default(int?), int? pageSize = default(int?))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchJobLayoutsResultDto>("/aida/v1/scanner/job-templates/{id}/layouts/assigned", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssignedLayoutsByJobTemplateId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchJobLayoutsResultDto</returns>
        public async System.Threading.Tasks.Task<SearchJobLayoutsResultDto> GetAssignedLayoutsByJobTemplateIdAsync(int id, int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SearchJobLayoutsResultDto> localVarResponse = await GetAssignedLayoutsByJobTemplateIdWithHttpInfoAsync(id, page, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 15)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchJobLayoutsResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<SearchJobLayoutsResultDto>> GetAssignedLayoutsByJobTemplateIdWithHttpInfoAsync(int id, int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchJobLayoutsResultDto>("/aida/v1/scanner/job-templates/{id}/layouts/assigned", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssignedLayoutsByJobTemplateId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>DataExchangeTableDefinition</returns>
        public DataExchangeTableDefinition GetDataExchangeTableDefinition(int jobId)
        {
            Aida.Sdk.Mini.Client.ApiResponse<DataExchangeTableDefinition> localVarResponse = GetDataExchangeTableDefinitionWithHttpInfo(jobId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of DataExchangeTableDefinition</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<DataExchangeTableDefinition> GetDataExchangeTableDefinitionWithHttpInfo(int jobId)
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("jobId", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(jobId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DataExchangeTableDefinition>("/aida/v1/etl/{jobId}/exchange-table-ddl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataExchangeTableDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataExchangeTableDefinition</returns>
        public async System.Threading.Tasks.Task<DataExchangeTableDefinition> GetDataExchangeTableDefinitionAsync(int jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<DataExchangeTableDefinition> localVarResponse = await GetDataExchangeTableDefinitionWithHttpInfoAsync(jobId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataExchangeTableDefinition)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<DataExchangeTableDefinition>> GetDataExchangeTableDefinitionWithHttpInfoAsync(int jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("jobId", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(jobId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DataExchangeTableDefinition>("/aida/v1/etl/{jobId}/exchange-table-ddl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataExchangeTableDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>List&lt;EntityDescriptor&gt;</returns>
        public List<EntityDescriptor> GetEntityDescriptorsByJobTemplateId(int jobId)
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<EntityDescriptor>> localVarResponse = GetEntityDescriptorsByJobTemplateIdWithHttpInfo(jobId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of List&lt;EntityDescriptor&gt;</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<List<EntityDescriptor>> GetEntityDescriptorsByJobTemplateIdWithHttpInfo(int jobId)
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("jobId", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(jobId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EntityDescriptor>>("/aida/v1/etl/{jobId}/entities", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityDescriptorsByJobTemplateId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EntityDescriptor&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityDescriptor>> GetEntityDescriptorsByJobTemplateIdAsync(int jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<EntityDescriptor>> localVarResponse = await GetEntityDescriptorsByJobTemplateIdWithHttpInfoAsync(jobId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EntityDescriptor&gt;)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<List<EntityDescriptor>>> GetEntityDescriptorsByJobTemplateIdWithHttpInfoAsync(int jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("jobId", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(jobId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EntityDescriptor>>("/aida/v1/etl/{jobId}/entities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityDescriptorsByJobTemplateId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>List&lt;JobInstance&gt;</returns>
        public List<JobInstance> GetJobInstances(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<JobInstance>> localVarResponse = GetJobInstancesWithHttpInfo(page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of List&lt;JobInstance&gt;</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<List<JobInstance>> GetJobInstancesWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<JobInstance>>("/aida/v1/workflows/job-instances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobInstance&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobInstance>> GetJobInstancesAsync(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<JobInstance>> localVarResponse = await GetJobInstancesWithHttpInfoAsync(page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobInstance&gt;)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<List<JobInstance>>> GetJobInstancesWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<JobInstance>>("/aida/v1/workflows/job-instances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobInstances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns>JobTemplateDto</returns>
        public JobTemplateDto GetJobTemplateById(int id, string scannerId = default(string))
        {
            Aida.Sdk.Mini.Client.ApiResponse<JobTemplateDto> localVarResponse = GetJobTemplateByIdWithHttpInfo(id, scannerId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns>ApiResponse of JobTemplateDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<JobTemplateDto> GetJobTemplateByIdWithHttpInfo(int id, string scannerId = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobTemplateDto>("/aida/v1/scanner/job-templates/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobTemplateById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobTemplateDto</returns>
        public async System.Threading.Tasks.Task<JobTemplateDto> GetJobTemplateByIdAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<JobTemplateDto> localVarResponse = await GetJobTemplateByIdWithHttpInfoAsync(id, scannerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobTemplateDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<JobTemplateDto>> GetJobTemplateByIdWithHttpInfoAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobTemplateDto>("/aida/v1/scanner/job-templates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobTemplateById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns>LayoutDto</returns>
        public LayoutDto GetLayoutById(int id, string scannerId = default(string))
        {
            Aida.Sdk.Mini.Client.ApiResponse<LayoutDto> localVarResponse = GetLayoutByIdWithHttpInfo(id, scannerId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <returns>ApiResponse of LayoutDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<LayoutDto> GetLayoutByIdWithHttpInfo(int id, string scannerId = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LayoutDto>("/aida/v1/scanner/layouts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLayoutById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LayoutDto</returns>
        public async System.Threading.Tasks.Task<LayoutDto> GetLayoutByIdAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<LayoutDto> localVarResponse = await GetLayoutByIdWithHttpInfoAsync(id, scannerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LayoutDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<LayoutDto>> GetLayoutByIdWithHttpInfoAsync(int id, string scannerId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LayoutDto>("/aida/v1/scanner/layouts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLayoutById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RuntimeMetrics</returns>
        public RuntimeMetrics GetMetrics()
        {
            Aida.Sdk.Mini.Client.ApiResponse<RuntimeMetrics> localVarResponse = GetMetricsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RuntimeMetrics</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<RuntimeMetrics> GetMetricsWithHttpInfo()
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RuntimeMetrics>("/aida/v1/workflow-scheduler/metrics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetrics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuntimeMetrics</returns>
        public async System.Threading.Tasks.Task<RuntimeMetrics> GetMetricsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<RuntimeMetrics> localVarResponse = await GetMetricsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuntimeMetrics)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<RuntimeMetrics>> GetMetricsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RuntimeMetrics>("/aida/v1/workflow-scheduler/metrics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetrics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> GetQueuedJobs()
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<int>> localVarResponse = GetQueuedJobsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<List<int>> GetQueuedJobsWithHttpInfo()
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<int>>("/aida/v1/workflow-scheduler/queued-jobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQueuedJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> GetQueuedJobsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<int>> localVarResponse = await GetQueuedJobsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<List<int>>> GetQueuedJobsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<int>>("/aida/v1/workflow-scheduler/queued-jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQueuedJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the list of available readers 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <returns>SCardReader</returns>
        public SCardReader GetReader(int readerIndex)
        {
            Aida.Sdk.Mini.Client.ApiResponse<SCardReader> localVarResponse = GetReaderWithHttpInfo(readerIndex);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the list of available readers 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <returns>ApiResponse of SCardReader</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<SCardReader> GetReaderWithHttpInfo(int readerIndex)
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCardReader>("/api/v1/pcsc-gateway/readers/{readerIndex}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReader", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the list of available readers 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCardReader</returns>
        public async System.Threading.Tasks.Task<SCardReader> GetReaderAsync(int readerIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SCardReader> localVarResponse = await GetReaderWithHttpInfoAsync(readerIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the list of available readers 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCardReader)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<SCardReader>> GetReaderWithHttpInfoAsync(int readerIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SCardReader>("/api/v1/pcsc-gateway/readers/{readerIndex}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReader", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the list of available readers 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SCardReader&gt;</returns>
        public List<SCardReader> GetReaders()
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<SCardReader>> localVarResponse = GetReadersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the list of available readers 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SCardReader&gt;</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<List<SCardReader>> GetReadersWithHttpInfo()
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SCardReader>>("/api/v1/pcsc-gateway/readers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReaders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the list of available readers 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SCardReader&gt;</returns>
        public async System.Threading.Tasks.Task<List<SCardReader>> GetReadersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<SCardReader>> localVarResponse = await GetReadersWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the list of available readers 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SCardReader&gt;)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<List<SCardReader>>> GetReadersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SCardReader>>("/api/v1/pcsc-gateway/readers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReaders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WorkflowInstanceSummaryModel&gt;</returns>
        public List<WorkflowInstanceSummaryModel> GetRunningWorkflows()
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<WorkflowInstanceSummaryModel>> localVarResponse = GetRunningWorkflowsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WorkflowInstanceSummaryModel&gt;</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<List<WorkflowInstanceSummaryModel>> GetRunningWorkflowsWithHttpInfo()
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WorkflowInstanceSummaryModel>>("/aida/v1/workflow-scheduler/workflows/running", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunningWorkflows", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkflowInstanceSummaryModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkflowInstanceSummaryModel>> GetRunningWorkflowsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<WorkflowInstanceSummaryModel>> localVarResponse = await GetRunningWorkflowsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowInstanceSummaryModel&gt;)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<List<WorkflowInstanceSummaryModel>>> GetRunningWorkflowsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WorkflowInstanceSummaryModel>>("/aida/v1/workflow-scheduler/workflows/running", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunningWorkflows", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invokes SCardConnect on the specified reader and tries to read the ATR  from the card currently present in the reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <returns>byte[]</returns>
        public byte[] GetSmartCardAtr(int readerIndex)
        {
            Aida.Sdk.Mini.Client.ApiResponse<byte[]> localVarResponse = GetSmartCardAtrWithHttpInfo(readerIndex);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invokes SCardConnect on the specified reader and tries to read the ATR  from the card currently present in the reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<byte[]> GetSmartCardAtrWithHttpInfo(int readerIndex)
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<byte[]>("/api/v1/pcsc-gateway/{readerIndex}/smart-card/atr", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSmartCardAtr", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invokes SCardConnect on the specified reader and tries to read the ATR  from the card currently present in the reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetSmartCardAtrAsync(int readerIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<byte[]> localVarResponse = await GetSmartCardAtrWithHttpInfoAsync(readerIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invokes SCardConnect on the specified reader and tries to read the ATR  from the card currently present in the reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<byte[]>> GetSmartCardAtrWithHttpInfoAsync(int readerIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<byte[]>("/api/v1/pcsc-gateway/{readerIndex}/smart-card/atr", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSmartCardAtr", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke SCardStatus on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <returns>SCardState</returns>
        public SCardState GetSmartCardStatus(int readerIndex)
        {
            Aida.Sdk.Mini.Client.ApiResponse<SCardState> localVarResponse = GetSmartCardStatusWithHttpInfo(readerIndex);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invoke SCardStatus on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <returns>ApiResponse of SCardState</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<SCardState> GetSmartCardStatusWithHttpInfo(int readerIndex)
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SCardState>("/api/v1/pcsc-gateway/{readerIndex}/smart-card/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSmartCardStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke SCardStatus on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SCardState</returns>
        public async System.Threading.Tasks.Task<SCardState> GetSmartCardStatusAsync(int readerIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SCardState> localVarResponse = await GetSmartCardStatusWithHttpInfoAsync(readerIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invoke SCardStatus on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SCardState)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<SCardState>> GetSmartCardStatusWithHttpInfoAsync(int readerIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SCardState>("/api/v1/pcsc-gateway/{readerIndex}/smart-card/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSmartCardStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemInfoStatusDto</returns>
        public SystemInfoStatusDto GetSystemInfo()
        {
            Aida.Sdk.Mini.Client.ApiResponse<SystemInfoStatusDto> localVarResponse = GetSystemInfoWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemInfoStatusDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<SystemInfoStatusDto> GetSystemInfoWithHttpInfo()
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SystemInfoStatusDto>("/aida/v1/system/info", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemInfoStatusDto</returns>
        public async System.Threading.Tasks.Task<SystemInfoStatusDto> GetSystemInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SystemInfoStatusDto> localVarResponse = await GetSystemInfoWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemInfoStatusDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<SystemInfoStatusDto>> GetSystemInfoWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemInfoStatusDto>("/aida/v1/system/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemStatusDto</returns>
        public SystemStatusDto GetSystemStatus()
        {
            Aida.Sdk.Mini.Client.ApiResponse<SystemStatusDto> localVarResponse = GetSystemStatusWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemStatusDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<SystemStatusDto> GetSystemStatusWithHttpInfo()
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SystemStatusDto>("/aida/v1/system/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemStatusDto</returns>
        public async System.Threading.Tasks.Task<SystemStatusDto> GetSystemStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SystemStatusDto> localVarResponse = await GetSystemStatusWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemStatusDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<SystemStatusDto>> GetSystemStatusWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemStatusDto>("/aida/v1/system/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>WebhooksTargetDto</returns>
        public WebhooksTargetDto GetWebhooksTargetById(int id)
        {
            Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto> localVarResponse = GetWebhooksTargetByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of WebhooksTargetDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto> GetWebhooksTargetByIdWithHttpInfo(int id)
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebhooksTargetDto>("/aida/v1/webhooks-targets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksTargetById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksTargetDto</returns>
        public async System.Threading.Tasks.Task<WebhooksTargetDto> GetWebhooksTargetByIdAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto> localVarResponse = await GetWebhooksTargetByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksTargetDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto>> GetWebhooksTargetByIdWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhooksTargetDto>("/aida/v1/webhooks-targets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksTargetById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WorkflowBlueprintSummaryModelPagedList</returns>
        public WorkflowBlueprintSummaryModelPagedList GetWorkflowRegistry()
        {
            Aida.Sdk.Mini.Client.ApiResponse<WorkflowBlueprintSummaryModelPagedList> localVarResponse = GetWorkflowRegistryWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WorkflowBlueprintSummaryModelPagedList</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<WorkflowBlueprintSummaryModelPagedList> GetWorkflowRegistryWithHttpInfo()
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkflowBlueprintSummaryModelPagedList>("/aida/v1/workflow-scheduler/workflow-registry", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflowRegistry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowBlueprintSummaryModelPagedList</returns>
        public async System.Threading.Tasks.Task<WorkflowBlueprintSummaryModelPagedList> GetWorkflowRegistryAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WorkflowBlueprintSummaryModelPagedList> localVarResponse = await GetWorkflowRegistryWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowBlueprintSummaryModelPagedList)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<WorkflowBlueprintSummaryModelPagedList>> GetWorkflowRegistryWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkflowBlueprintSummaryModelPagedList>("/aida/v1/workflow-scheduler/workflow-registry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflowRegistry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WorkflowSchedulerStateDto</returns>
        public WorkflowSchedulerStateDto GetWorkflowSchedulerState()
        {
            Aida.Sdk.Mini.Client.ApiResponse<WorkflowSchedulerStateDto> localVarResponse = GetWorkflowSchedulerStateWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WorkflowSchedulerStateDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<WorkflowSchedulerStateDto> GetWorkflowSchedulerStateWithHttpInfo()
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkflowSchedulerStateDto>("/aida/v1/workflow-scheduler/state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflowSchedulerState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowSchedulerStateDto</returns>
        public async System.Threading.Tasks.Task<WorkflowSchedulerStateDto> GetWorkflowSchedulerStateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WorkflowSchedulerStateDto> localVarResponse = await GetWorkflowSchedulerStateWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowSchedulerStateDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<WorkflowSchedulerStateDto>> GetWorkflowSchedulerStateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkflowSchedulerStateDto>("/aida/v1/workflow-scheduler/state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflowSchedulerState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <returns>LayoutDto</returns>
        public LayoutDto ImportLayoutFile(string scannerId = default(string), string layoutName = default(string), string filename = default(string))
        {
            Aida.Sdk.Mini.Client.ApiResponse<LayoutDto> localVarResponse = ImportLayoutFileWithHttpInfo(scannerId, layoutName, filename);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <returns>ApiResponse of LayoutDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<LayoutDto> ImportLayoutFileWithHttpInfo(string scannerId = default(string), string layoutName = default(string), string filename = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (layoutName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "layoutName", layoutName));
            }
            if (filename != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LayoutDto>("/aida/v1/scanner/layouts/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLayoutFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LayoutDto</returns>
        public async System.Threading.Tasks.Task<LayoutDto> ImportLayoutFileAsync(string scannerId = default(string), string layoutName = default(string), string filename = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<LayoutDto> localVarResponse = await ImportLayoutFileWithHttpInfoAsync(scannerId, layoutName, filename, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LayoutDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<LayoutDto>> ImportLayoutFileWithHttpInfoAsync(string scannerId = default(string), string layoutName = default(string), string filename = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (layoutName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "layoutName", layoutName));
            }
            if (filename != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LayoutDto>("/aida/v1/scanner/layouts/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLayoutFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <returns></returns>
        public void ImportLayoutFileValidation(string layoutName = default(string), string filename = default(string))
        {
            ImportLayoutFileValidationWithHttpInfo(layoutName, filename);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<Object> ImportLayoutFileValidationWithHttpInfo(string layoutName = default(string), string filename = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (layoutName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "layoutName", layoutName));
            }
            if (filename != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/aida/v1/scanner/layouts/import/_validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLayoutFileValidation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportLayoutFileValidationAsync(string layoutName = default(string), string filename = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ImportLayoutFileValidationWithHttpInfoAsync(layoutName, filename, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="filename"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<Object>> ImportLayoutFileValidationWithHttpInfoAsync(string layoutName = default(string), string filename = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (layoutName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "layoutName", layoutName));
            }
            if (filename != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/aida/v1/scanner/layouts/import/_validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportLayoutFileValidation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ReleaseContext()
        {
            ReleaseContextWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<Object> ReleaseContextWithHttpInfo()
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/pcsc-gateway/release-context", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReleaseContext", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReleaseContextAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ReleaseContextWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<Object>> ReleaseContextWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/pcsc-gateway/release-context", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReleaseContext", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>InkjetLayoutDto</returns>
        public InkjetLayoutDto RenameInkjetLayout(int id, string name = default(string))
        {
            Aida.Sdk.Mini.Client.ApiResponse<InkjetLayoutDto> localVarResponse = RenameInkjetLayoutWithHttpInfo(id, name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of InkjetLayoutDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<InkjetLayoutDto> RenameInkjetLayoutWithHttpInfo(int id, string name = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<InkjetLayoutDto>("/aida/v1/inkjet/layouts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameInkjetLayout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InkjetLayoutDto</returns>
        public async System.Threading.Tasks.Task<InkjetLayoutDto> RenameInkjetLayoutAsync(int id, string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<InkjetLayoutDto> localVarResponse = await RenameInkjetLayoutWithHttpInfoAsync(id, name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InkjetLayoutDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<InkjetLayoutDto>> RenameInkjetLayoutWithHttpInfoAsync(int id, string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<InkjetLayoutDto>("/aida/v1/inkjet/layouts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameInkjetLayout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>LayoutDto</returns>
        public LayoutDto RenameLayout(int id, string name = default(string))
        {
            Aida.Sdk.Mini.Client.ApiResponse<LayoutDto> localVarResponse = RenameLayoutWithHttpInfo(id, name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of LayoutDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<LayoutDto> RenameLayoutWithHttpInfo(int id, string name = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<LayoutDto>("/aida/v1/scanner/layouts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameLayout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LayoutDto</returns>
        public async System.Threading.Tasks.Task<LayoutDto> RenameLayoutAsync(int id, string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<LayoutDto> localVarResponse = await RenameLayoutWithHttpInfoAsync(id, name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LayoutDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<LayoutDto>> RenameLayoutWithHttpInfoAsync(int id, string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<LayoutDto>("/aida/v1/scanner/layouts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameLayout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;JobInstance&gt;</returns>
        public List<JobInstance> ResumeWorkflowScheduler()
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<JobInstance>> localVarResponse = ResumeWorkflowSchedulerWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;JobInstance&gt;</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<List<JobInstance>> ResumeWorkflowSchedulerWithHttpInfo()
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<JobInstance>>("/aida/v1/workflow-scheduler/resume", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeWorkflowScheduler", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobInstance&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobInstance>> ResumeWorkflowSchedulerAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<JobInstance>> localVarResponse = await ResumeWorkflowSchedulerWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobInstance&gt;)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<List<JobInstance>>> ResumeWorkflowSchedulerWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<JobInstance>>("/aida/v1/workflow-scheduler/resume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeWorkflowScheduler", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notifies a suspended workflow instance when that the external process has completed execution 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitForCompletion">If true, the server will respond once the workflow enters the completed/faulted state (optional, default to false)</param>
        /// <param name="externalProcessCompletedMessage">The External process completed message payload (optional)</param>
        /// <returns>List&lt;JobInstance&gt;</returns>
        public List<JobInstance> SignalExternalProcessCompleted(bool? waitForCompletion = default(bool?), ExternalProcessCompletedMessage externalProcessCompletedMessage = default(ExternalProcessCompletedMessage))
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<JobInstance>> localVarResponse = SignalExternalProcessCompletedWithHttpInfo(waitForCompletion, externalProcessCompletedMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notifies a suspended workflow instance when that the external process has completed execution 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitForCompletion">If true, the server will respond once the workflow enters the completed/faulted state (optional, default to false)</param>
        /// <param name="externalProcessCompletedMessage">The External process completed message payload (optional)</param>
        /// <returns>ApiResponse of List&lt;JobInstance&gt;</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<List<JobInstance>> SignalExternalProcessCompletedWithHttpInfo(bool? waitForCompletion = default(bool?), ExternalProcessCompletedMessage externalProcessCompletedMessage = default(ExternalProcessCompletedMessage))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (waitForCompletion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "waitForCompletion", waitForCompletion));
            }
            localVarRequestOptions.Data = externalProcessCompletedMessage;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<JobInstance>>("/aida/v1/workflow-scheduler/workflows/signal/external-process-completed", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignalExternalProcessCompleted", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notifies a suspended workflow instance when that the external process has completed execution 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitForCompletion">If true, the server will respond once the workflow enters the completed/faulted state (optional, default to false)</param>
        /// <param name="externalProcessCompletedMessage">The External process completed message payload (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobInstance&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobInstance>> SignalExternalProcessCompletedAsync(bool? waitForCompletion = default(bool?), ExternalProcessCompletedMessage externalProcessCompletedMessage = default(ExternalProcessCompletedMessage), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<List<JobInstance>> localVarResponse = await SignalExternalProcessCompletedWithHttpInfoAsync(waitForCompletion, externalProcessCompletedMessage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notifies a suspended workflow instance when that the external process has completed execution 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="waitForCompletion">If true, the server will respond once the workflow enters the completed/faulted state (optional, default to false)</param>
        /// <param name="externalProcessCompletedMessage">The External process completed message payload (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobInstance&gt;)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<List<JobInstance>>> SignalExternalProcessCompletedWithHttpInfoAsync(bool? waitForCompletion = default(bool?), ExternalProcessCompletedMessage externalProcessCompletedMessage = default(ExternalProcessCompletedMessage), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (waitForCompletion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "waitForCompletion", waitForCompletion));
            }
            localVarRequestOptions.Data = externalProcessCompletedMessage;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<JobInstance>>("/aida/v1/workflow-scheduler/workflows/signal/external-process-completed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignalExternalProcessCompleted", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke SCardConnect on the specified reader. The card handle (hCard) is held server side  until the next time Connect is invoked 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardConnectParamsDto"> (optional)</param>
        /// <returns>PcScConnectResult</returns>
        public PcScConnectResult SmartCardConnect(int readerIndex, SCardConnectParamsDto sCardConnectParamsDto = default(SCardConnectParamsDto))
        {
            Aida.Sdk.Mini.Client.ApiResponse<PcScConnectResult> localVarResponse = SmartCardConnectWithHttpInfo(readerIndex, sCardConnectParamsDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invoke SCardConnect on the specified reader. The card handle (hCard) is held server side  until the next time Connect is invoked 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardConnectParamsDto"> (optional)</param>
        /// <returns>ApiResponse of PcScConnectResult</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<PcScConnectResult> SmartCardConnectWithHttpInfo(int readerIndex, SCardConnectParamsDto sCardConnectParamsDto = default(SCardConnectParamsDto))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter
            localVarRequestOptions.Data = sCardConnectParamsDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PcScConnectResult>("/api/v1/pcsc-gateway/{readerIndex}/smart-card/connect", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SmartCardConnect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke SCardConnect on the specified reader. The card handle (hCard) is held server side  until the next time Connect is invoked 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardConnectParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PcScConnectResult</returns>
        public async System.Threading.Tasks.Task<PcScConnectResult> SmartCardConnectAsync(int readerIndex, SCardConnectParamsDto sCardConnectParamsDto = default(SCardConnectParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<PcScConnectResult> localVarResponse = await SmartCardConnectWithHttpInfoAsync(readerIndex, sCardConnectParamsDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invoke SCardConnect on the specified reader. The card handle (hCard) is held server side  until the next time Connect is invoked 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardConnectParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PcScConnectResult)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<PcScConnectResult>> SmartCardConnectWithHttpInfoAsync(int readerIndex, SCardConnectParamsDto sCardConnectParamsDto = default(SCardConnectParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter
            localVarRequestOptions.Data = sCardConnectParamsDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PcScConnectResult>("/api/v1/pcsc-gateway/{readerIndex}/smart-card/connect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SmartCardConnect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke SCardDisconnect on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardDisconnectParamsDto"> (optional)</param>
        /// <returns>PCSCActionResultDto</returns>
        public PCSCActionResultDto SmartCardDisconnect(int readerIndex, SCardDisconnectParamsDto sCardDisconnectParamsDto = default(SCardDisconnectParamsDto))
        {
            Aida.Sdk.Mini.Client.ApiResponse<PCSCActionResultDto> localVarResponse = SmartCardDisconnectWithHttpInfo(readerIndex, sCardDisconnectParamsDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invoke SCardDisconnect on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardDisconnectParamsDto"> (optional)</param>
        /// <returns>ApiResponse of PCSCActionResultDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<PCSCActionResultDto> SmartCardDisconnectWithHttpInfo(int readerIndex, SCardDisconnectParamsDto sCardDisconnectParamsDto = default(SCardDisconnectParamsDto))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter
            localVarRequestOptions.Data = sCardDisconnectParamsDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PCSCActionResultDto>("/api/v1/pcsc-gateway/{readerIndex}/smart-card/disconnect", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SmartCardDisconnect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke SCardDisconnect on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardDisconnectParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PCSCActionResultDto</returns>
        public async System.Threading.Tasks.Task<PCSCActionResultDto> SmartCardDisconnectAsync(int readerIndex, SCardDisconnectParamsDto sCardDisconnectParamsDto = default(SCardDisconnectParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<PCSCActionResultDto> localVarResponse = await SmartCardDisconnectWithHttpInfoAsync(readerIndex, sCardDisconnectParamsDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invoke SCardDisconnect on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardDisconnectParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PCSCActionResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<PCSCActionResultDto>> SmartCardDisconnectWithHttpInfoAsync(int readerIndex, SCardDisconnectParamsDto sCardDisconnectParamsDto = default(SCardDisconnectParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter
            localVarRequestOptions.Data = sCardDisconnectParamsDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PCSCActionResultDto>("/api/v1/pcsc-gateway/{readerIndex}/smart-card/disconnect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SmartCardDisconnect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke SCardReconnect on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardReconnectParamsDto"> (optional)</param>
        /// <returns></returns>
        public void SmartCardReconnect(int readerIndex, SCardReconnectParamsDto sCardReconnectParamsDto = default(SCardReconnectParamsDto))
        {
            SmartCardReconnectWithHttpInfo(readerIndex, sCardReconnectParamsDto);
        }

        /// <summary>
        /// Invoke SCardReconnect on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardReconnectParamsDto"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<Object> SmartCardReconnectWithHttpInfo(int readerIndex, SCardReconnectParamsDto sCardReconnectParamsDto = default(SCardReconnectParamsDto))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter
            localVarRequestOptions.Data = sCardReconnectParamsDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/pcsc-gateway/{readerIndex}/smart-card/reconnect", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SmartCardReconnect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke SCardReconnect on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardReconnectParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SmartCardReconnectAsync(int readerIndex, SCardReconnectParamsDto sCardReconnectParamsDto = default(SCardReconnectParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SmartCardReconnectWithHttpInfoAsync(readerIndex, sCardReconnectParamsDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Invoke SCardReconnect on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex"></param>
        /// <param name="sCardReconnectParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<Object>> SmartCardReconnectWithHttpInfoAsync(int readerIndex, SCardReconnectParamsDto sCardReconnectParamsDto = default(SCardReconnectParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter
            localVarRequestOptions.Data = sCardReconnectParamsDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/pcsc-gateway/{readerIndex}/smart-card/reconnect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SmartCardReconnect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSchedulerStartupParamsDto"> (optional)</param>
        /// <returns>WorkflowSchedulerStateDto</returns>
        public WorkflowSchedulerStateDto StartWorkflowScheduler(WorkflowSchedulerStartupParamsDto workflowSchedulerStartupParamsDto = default(WorkflowSchedulerStartupParamsDto))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WorkflowSchedulerStateDto> localVarResponse = StartWorkflowSchedulerWithHttpInfo(workflowSchedulerStartupParamsDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSchedulerStartupParamsDto"> (optional)</param>
        /// <returns>ApiResponse of WorkflowSchedulerStateDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<WorkflowSchedulerStateDto> StartWorkflowSchedulerWithHttpInfo(WorkflowSchedulerStartupParamsDto workflowSchedulerStartupParamsDto = default(WorkflowSchedulerStartupParamsDto))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = workflowSchedulerStartupParamsDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowSchedulerStateDto>("/aida/v1/workflow-scheduler/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartWorkflowScheduler", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSchedulerStartupParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowSchedulerStateDto</returns>
        public async System.Threading.Tasks.Task<WorkflowSchedulerStateDto> StartWorkflowSchedulerAsync(WorkflowSchedulerStartupParamsDto workflowSchedulerStartupParamsDto = default(WorkflowSchedulerStartupParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WorkflowSchedulerStateDto> localVarResponse = await StartWorkflowSchedulerWithHttpInfoAsync(workflowSchedulerStartupParamsDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSchedulerStartupParamsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowSchedulerStateDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<WorkflowSchedulerStateDto>> StartWorkflowSchedulerWithHttpInfoAsync(WorkflowSchedulerStartupParamsDto workflowSchedulerStartupParamsDto = default(WorkflowSchedulerStartupParamsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = workflowSchedulerStartupParamsDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowSchedulerStateDto>("/aida/v1/workflow-scheduler/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartWorkflowScheduler", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAllRunningWorkflows"> (optional, default to false)</param>
        /// <param name="errorCode"> (optional)</param>
        /// <returns>WorkflowSchedulerStateDto</returns>
        public WorkflowSchedulerStateDto StopWorkflowScheduler(bool? stopAllRunningWorkflows = default(bool?), JobErrorCodes? errorCode = default(JobErrorCodes?))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WorkflowSchedulerStateDto> localVarResponse = StopWorkflowSchedulerWithHttpInfo(stopAllRunningWorkflows, errorCode);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAllRunningWorkflows"> (optional, default to false)</param>
        /// <param name="errorCode"> (optional)</param>
        /// <returns>ApiResponse of WorkflowSchedulerStateDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<WorkflowSchedulerStateDto> StopWorkflowSchedulerWithHttpInfo(bool? stopAllRunningWorkflows = default(bool?), JobErrorCodes? errorCode = default(JobErrorCodes?))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (stopAllRunningWorkflows != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "stopAllRunningWorkflows", stopAllRunningWorkflows));
            }
            if (errorCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "errorCode", errorCode));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowSchedulerStateDto>("/aida/v1/workflow-scheduler/stop", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopWorkflowScheduler", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAllRunningWorkflows"> (optional, default to false)</param>
        /// <param name="errorCode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowSchedulerStateDto</returns>
        public async System.Threading.Tasks.Task<WorkflowSchedulerStateDto> StopWorkflowSchedulerAsync(bool? stopAllRunningWorkflows = default(bool?), JobErrorCodes? errorCode = default(JobErrorCodes?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WorkflowSchedulerStateDto> localVarResponse = await StopWorkflowSchedulerWithHttpInfoAsync(stopAllRunningWorkflows, errorCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopAllRunningWorkflows"> (optional, default to false)</param>
        /// <param name="errorCode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowSchedulerStateDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<WorkflowSchedulerStateDto>> StopWorkflowSchedulerWithHttpInfoAsync(bool? stopAllRunningWorkflows = default(bool?), JobErrorCodes? errorCode = default(JobErrorCodes?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (stopAllRunningWorkflows != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "stopAllRunningWorkflows", stopAllRunningWorkflows));
            }
            if (errorCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "errorCode", errorCode));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowSchedulerStateDto>("/aida/v1/workflow-scheduler/stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopWorkflowScheduler", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemStatusDto</returns>
        public SystemStatusDto SystemReset()
        {
            Aida.Sdk.Mini.Client.ApiResponse<SystemStatusDto> localVarResponse = SystemResetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemStatusDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<SystemStatusDto> SystemResetWithHttpInfo()
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SystemStatusDto>("/aida/v1/system/reset", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SystemReset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemStatusDto</returns>
        public async System.Threading.Tasks.Task<SystemStatusDto> SystemResetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<SystemStatusDto> localVarResponse = await SystemResetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemStatusDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<SystemStatusDto>> SystemResetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SystemStatusDto>("/aida/v1/system/reset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SystemReset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>WebhookTargetTestResultDto</returns>
        public WebhookTargetTestResultDto TestWebhookTarget(int id)
        {
            Aida.Sdk.Mini.Client.ApiResponse<WebhookTargetTestResultDto> localVarResponse = TestWebhookTargetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of WebhookTargetTestResultDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<WebhookTargetTestResultDto> TestWebhookTargetWithHttpInfo(int id)
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WebhookTargetTestResultDto>("/aida/v1/webhooks-targets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestWebhookTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookTargetTestResultDto</returns>
        public async System.Threading.Tasks.Task<WebhookTargetTestResultDto> TestWebhookTargetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WebhookTargetTestResultDto> localVarResponse = await TestWebhookTargetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookTargetTestResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<WebhookTargetTestResultDto>> TestWebhookTargetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WebhookTargetTestResultDto>("/aida/v1/webhooks-targets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestWebhookTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke SCardTransmit on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex">The reader id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] Transmit(int readerIndex, byte[] body = default(byte[]))
        {
            Aida.Sdk.Mini.Client.ApiResponse<byte[]> localVarResponse = TransmitWithHttpInfo(readerIndex, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invoke SCardTransmit on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex">The reader id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<byte[]> TransmitWithHttpInfo(int readerIndex, byte[] body = default(byte[]))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<byte[]>("/api/v1/pcsc-gateway/{readerIndex}/smart-card/transmit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Transmit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invoke SCardTransmit on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex">The reader id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> TransmitAsync(int readerIndex, byte[] body = default(byte[]), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<byte[]> localVarResponse = await TransmitWithHttpInfoAsync(readerIndex, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invoke SCardTransmit on the specified reader 
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readerIndex">The reader id</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<byte[]>> TransmitWithHttpInfoAsync(int readerIndex, byte[] body = default(byte[]), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("readerIndex", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(readerIndex)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<byte[]>("/api/v1/pcsc-gateway/{readerIndex}/smart-card/transmit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Transmit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <returns>WebhooksTargetDto</returns>
        public WebhooksTargetDto UpdateWebhooksTarget(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto> localVarResponse = UpdateWebhooksTargetWithHttpInfo(webhooksTargetDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <returns>ApiResponse of WebhooksTargetDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto> UpdateWebhooksTargetWithHttpInfo(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = webhooksTargetDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<WebhooksTargetDto>("/aida/v1/webhooks-targets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhooksTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhooksTargetDto</returns>
        public async System.Threading.Tasks.Task<WebhooksTargetDto> UpdateWebhooksTargetAsync(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto> localVarResponse = await UpdateWebhooksTargetWithHttpInfoAsync(webhooksTargetDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhooksTargetDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhooksTargetDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<WebhooksTargetDto>> UpdateWebhooksTargetWithHttpInfoAsync(WebhooksTargetDto webhooksTargetDto = default(WebhooksTargetDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = webhooksTargetDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<WebhooksTargetDto>("/aida/v1/webhooks-targets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhooksTarget", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>LayoutDto</returns>
        public LayoutDto UploadLayoutFile(string layoutName = default(string), string supportSide = default(string), string scannerId = default(string), List<FileParameter> files = default(List<FileParameter>))
        {
            Aida.Sdk.Mini.Client.ApiResponse<LayoutDto> localVarResponse = UploadLayoutFileWithHttpInfo(layoutName, supportSide, scannerId, files);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <returns>ApiResponse of LayoutDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<LayoutDto> UploadLayoutFileWithHttpInfo(string layoutName = default(string), string supportSide = default(string), string scannerId = default(string), List<FileParameter> files = default(List<FileParameter>))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (layoutName != null)
            {
                localVarRequestOptions.FormParameters.Add("layoutName", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(layoutName)); // form parameter
            }
            if (supportSide != null)
            {
                localVarRequestOptions.FormParameters.Add("supportSide", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(supportSide)); // form parameter
            }
            if (scannerId != null)
            {
                localVarRequestOptions.FormParameters.Add("scannerId", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(scannerId)); // form parameter
            }
            if (files != null)
            {
                localVarRequestOptions.FileParameters.Add("files", files);
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LayoutDto>("/aida/v1/scanner/layouts/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadLayoutFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LayoutDto</returns>
        public async System.Threading.Tasks.Task<LayoutDto> UploadLayoutFileAsync(string layoutName = default(string), string supportSide = default(string), string scannerId = default(string), List<FileParameter> files = default(List<FileParameter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<LayoutDto> localVarResponse = await UploadLayoutFileWithHttpInfoAsync(layoutName, supportSide, scannerId, files, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="supportSide"> (optional)</param>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="files"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LayoutDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<LayoutDto>> UploadLayoutFileWithHttpInfoAsync(string layoutName = default(string), string supportSide = default(string), string scannerId = default(string), List<FileParameter> files = default(List<FileParameter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (layoutName != null)
            {
                localVarRequestOptions.FormParameters.Add("layoutName", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(layoutName)); // form parameter
            }
            if (supportSide != null)
            {
                localVarRequestOptions.FormParameters.Add("supportSide", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(supportSide)); // form parameter
            }
            if (scannerId != null)
            {
                localVarRequestOptions.FormParameters.Add("scannerId", Aida.Sdk.Mini.Client.ClientUtils.ParameterToString(scannerId)); // form parameter
            }
            if (files != null)
            {
                localVarRequestOptions.FileParameters.Add("files", files);
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LayoutDto>("/aida/v1/scanner/layouts/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadLayoutFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>NameValidationResultDto</returns>
        public NameValidationResultDto ValidateInkjetLayoutName(string scannerId = default(string), string body = default(string))
        {
            Aida.Sdk.Mini.Client.ApiResponse<NameValidationResultDto> localVarResponse = ValidateInkjetLayoutNameWithHttpInfo(scannerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of NameValidationResultDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<NameValidationResultDto> ValidateInkjetLayoutNameWithHttpInfo(string scannerId = default(string), string body = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NameValidationResultDto>("/aida/v1/inkjet/layouts/validate-name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateInkjetLayoutName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameValidationResultDto</returns>
        public async System.Threading.Tasks.Task<NameValidationResultDto> ValidateInkjetLayoutNameAsync(string scannerId = default(string), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<NameValidationResultDto> localVarResponse = await ValidateInkjetLayoutNameWithHttpInfoAsync(scannerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameValidationResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<NameValidationResultDto>> ValidateInkjetLayoutNameWithHttpInfoAsync(string scannerId = default(string), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NameValidationResultDto>("/aida/v1/inkjet/layouts/validate-name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateInkjetLayoutName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>NameValidationResultDto</returns>
        public NameValidationResultDto ValidateJobTemplateName(string scannerId = default(string), string body = default(string))
        {
            Aida.Sdk.Mini.Client.ApiResponse<NameValidationResultDto> localVarResponse = ValidateJobTemplateNameWithHttpInfo(scannerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of NameValidationResultDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<NameValidationResultDto> ValidateJobTemplateNameWithHttpInfo(string scannerId = default(string), string body = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NameValidationResultDto>("/aida/v1/scanner/job-templates/validate-name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateJobTemplateName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameValidationResultDto</returns>
        public async System.Threading.Tasks.Task<NameValidationResultDto> ValidateJobTemplateNameAsync(string scannerId = default(string), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<NameValidationResultDto> localVarResponse = await ValidateJobTemplateNameWithHttpInfoAsync(scannerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameValidationResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<NameValidationResultDto>> ValidateJobTemplateNameWithHttpInfoAsync(string scannerId = default(string), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NameValidationResultDto>("/aida/v1/scanner/job-templates/validate-name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateJobTemplateName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>NameValidationResultDto</returns>
        public NameValidationResultDto ValidateLayoutName(string scannerId = default(string), string body = default(string))
        {
            Aida.Sdk.Mini.Client.ApiResponse<NameValidationResultDto> localVarResponse = ValidateLayoutNameWithHttpInfo(scannerId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of NameValidationResultDto</returns>
        public Aida.Sdk.Mini.Client.ApiResponse<NameValidationResultDto> ValidateLayoutNameWithHttpInfo(string scannerId = default(string), string body = default(string))
        {
            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NameValidationResultDto>("/aida/v1/scanner/layouts/validate-name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateLayoutName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameValidationResultDto</returns>
        public async System.Threading.Tasks.Task<NameValidationResultDto> ValidateLayoutNameAsync(string scannerId = default(string), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Mini.Client.ApiResponse<NameValidationResultDto> localVarResponse = await ValidateLayoutNameWithHttpInfoAsync(scannerId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Mini.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameValidationResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Mini.Client.ApiResponse<NameValidationResultDto>> ValidateLayoutNameWithHttpInfoAsync(string scannerId = default(string), string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Mini.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Mini.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Mini.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Mini.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NameValidationResultDto>("/aida/v1/scanner/layouts/validate-name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateLayoutName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
