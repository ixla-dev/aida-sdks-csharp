/*
 * aida
 *
 * 1.0.713
 *
 * The version of the OpenAPI document: 1.0.713
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Aida.Sdk.Client;
using Aida.Sdk.Api;
// uncomment below to import models
//using Aida.Sdk.Model;

namespace Aida.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing AutoPosApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AutoPosApiTests : IDisposable
    {
        private AutoPosApi instance;

        public AutoPosApiTests()
        {
            instance = new AutoPosApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AutoPosApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AutoPosApi
            //Assert.IsType<AutoPosApi>(instance);
        }

        /// <summary>
        /// Test AddAutoPosSettings
        /// </summary>
        [Fact]
        public void AddAutoPosSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //JobTemplateLayoutAutoPosSettingsDto jobTemplateLayoutAutoPosSettingsDto = null;
            //var response = instance.AddAutoPosSettings(scannerId, jobTemplateLayoutAutoPosSettingsDto);
            //Assert.IsType<JobTemplateLayoutAutoPosSettingsDto>(response);
        }

        /// <summary>
        /// Test AddInkjetAutoPosSettings
        /// </summary>
        [Fact]
        public void AddInkjetAutoPosSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //JobTemplateInkjetLayoutAutoPosSettingsDto jobTemplateInkjetLayoutAutoPosSettingsDto = null;
            //var response = instance.AddInkjetAutoPosSettings(scannerId, jobTemplateInkjetLayoutAutoPosSettingsDto);
            //Assert.IsType<JobTemplateInkjetLayoutAutoPosSettingsDto>(response);
        }

        /// <summary>
        /// Test AidaV1AutoposInkjetCopyFromPost
        /// </summary>
        [Fact]
        public void AidaV1AutoposInkjetCopyFromPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? sourceAutoPosSettingsId = null;
            //int? jobTemplateInkjetLayoutId = null;
            //var response = instance.AidaV1AutoposInkjetCopyFromPost(sourceAutoPosSettingsId, jobTemplateInkjetLayoutId);
            //Assert.IsType<JobTemplateInkjetLayoutAutoPosSettingsDto>(response);
        }

        /// <summary>
        /// Test AutoPosConfigDebugLive
        /// </summary>
        [Fact]
        public void AutoPosConfigDebugLiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobTemplateId = null;
            //int layoutId = null;
            //string scannerId = null;
            //string cameraId = null;
            //float? threshold = null;
            //instance.AutoPosConfigDebugLive(jobTemplateId, layoutId, scannerId, cameraId, threshold);
        }

        /// <summary>
        /// Test AutoPosDebug
        /// </summary>
        [Fact]
        public void AutoPosDebugTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //float? threshold = null;
            //string scannerId = null;
            //string cameraId = null;
            //instance.AutoPosDebug(id, threshold, scannerId, cameraId);
        }

        /// <summary>
        /// Test AutoPosDebugLive
        /// </summary>
        [Fact]
        public void AutoPosDebugLiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //float? threshold = null;
            //string scannerId = null;
            //string cameraId = null;
            //instance.AutoPosDebugLive(id, threshold, scannerId, cameraId);
        }

        /// <summary>
        /// Test CreateTemplateMatchingConfiguration
        /// </summary>
        [Fact]
        public void CreateTemplateMatchingConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //TemplateMatchingConfigurationDto templateMatchingConfigurationDto = null;
            //var response = instance.CreateTemplateMatchingConfiguration(scannerId, templateMatchingConfigurationDto);
            //Assert.IsType<TemplateMatchingConfigurationDto>(response);
        }

        /// <summary>
        /// Test DeleteJobTemplateInkjetLayoutAutoPosSettings
        /// </summary>
        [Fact]
        public void DeleteJobTemplateInkjetLayoutAutoPosSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int autoPosSettingsId = null;
            //var response = instance.DeleteJobTemplateInkjetLayoutAutoPosSettings(autoPosSettingsId);
            //Assert.IsType<JobTemplateInkjetLayoutAutoPosSettingsDto>(response);
        }

        /// <summary>
        /// Test DeleteJobTemplateLayoutAutoPosSettings
        /// </summary>
        [Fact]
        public void DeleteJobTemplateLayoutAutoPosSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int autoPosSettingsId = null;
            //var response = instance.DeleteJobTemplateLayoutAutoPosSettings(autoPosSettingsId);
            //Assert.IsType<JobTemplateLayoutAutoPosSettingsDto>(response);
        }

        /// <summary>
        /// Test DeleteTemplateMatchingConfiguration
        /// </summary>
        [Fact]
        public void DeleteTemplateMatchingConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.DeleteTemplateMatchingConfiguration(id);
            //Assert.IsType<TemplateMatchingConfigurationDto>(response);
        }

        /// <summary>
        /// Test ExecuteTemplateMatching
        /// </summary>
        [Fact]
        public void ExecuteTemplateMatchingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int templateMatchingConfigurationId = null;
            //float? threshold = null;
            //string scannerId = null;
            //var response = instance.ExecuteTemplateMatching(templateMatchingConfigurationId, threshold, scannerId);
            //Assert.IsType<TemplateMatchingResultDto>(response);
        }

        /// <summary>
        /// Test FindTemplateMatchingConfigurations
        /// </summary>
        [Fact]
        public void FindTemplateMatchingConfigurationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? pageSize = null;
            //string query = null;
            //string sortCriteriaPropertyName = null;
            //SortDirection? sortCriteriaDirection = null;
            //var response = instance.FindTemplateMatchingConfigurations(page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            //Assert.IsType<SearchTemplateMatchingConfigurationsResultDto>(response);
        }

        /// <summary>
        /// Test GetOffset
        /// </summary>
        [Fact]
        public void GetOffsetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int autoPosSettingsId = null;
            //float? threshold = null;
            //string scannerId = null;
            //string cameraId = null;
            //var response = instance.GetOffset(autoPosSettingsId, threshold, scannerId, cameraId);
            //Assert.IsType<AutoPosResultDto>(response);
        }

        /// <summary>
        /// Test GetTemplateMatchingConfigurationById
        /// </summary>
        [Fact]
        public void GetTemplateMatchingConfigurationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetTemplateMatchingConfigurationById(id);
            //Assert.IsType<TemplateMatchingConfigurationDto>(response);
        }

        /// <summary>
        /// Test TemplateMatchingConfigurationDebugLivePage
        /// </summary>
        [Fact]
        public void TemplateMatchingConfigurationDebugLivePageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int templateMatchingConfigurationId = null;
            //float? threshold = null;
            //string scannerId = null;
            //string cameraId = null;
            //instance.TemplateMatchingConfigurationDebugLivePage(templateMatchingConfigurationId, threshold, scannerId, cameraId);
        }

        /// <summary>
        /// Test TemplateMatchingDebugLive
        /// </summary>
        [Fact]
        public void TemplateMatchingDebugLiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int templateMatchingConfigurationId = null;
            //float? threshold = null;
            //string scannerId = null;
            //string cameraId = null;
            //instance.TemplateMatchingDebugLive(templateMatchingConfigurationId, threshold, scannerId, cameraId);
        }

        /// <summary>
        /// Test UpdateAutoPosSettings
        /// </summary>
        [Fact]
        public void UpdateAutoPosSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //JobTemplateLayoutAutoPosSettingsDto jobTemplateLayoutAutoPosSettingsDto = null;
            //var response = instance.UpdateAutoPosSettings(scannerId, jobTemplateLayoutAutoPosSettingsDto);
            //Assert.IsType<JobTemplateLayoutAutoPosSettingsDto>(response);
        }

        /// <summary>
        /// Test UpdateInkjetAutoPosSettings
        /// </summary>
        [Fact]
        public void UpdateInkjetAutoPosSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //JobTemplateInkjetLayoutAutoPosSettingsDto jobTemplateInkjetLayoutAutoPosSettingsDto = null;
            //var response = instance.UpdateInkjetAutoPosSettings(scannerId, jobTemplateInkjetLayoutAutoPosSettingsDto);
            //Assert.IsType<JobTemplateInkjetLayoutAutoPosSettingsDto>(response);
        }

        /// <summary>
        /// Test UpdateTemplateMatchingConfiguration
        /// </summary>
        [Fact]
        public void UpdateTemplateMatchingConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //TemplateMatchingConfigurationDto templateMatchingConfigurationDto = null;
            //var response = instance.UpdateTemplateMatchingConfiguration(scannerId, templateMatchingConfigurationDto);
            //Assert.IsType<TemplateMatchingConfigurationDto>(response);
        }
    }
}
