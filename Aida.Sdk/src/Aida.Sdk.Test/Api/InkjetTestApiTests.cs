/*
 * aida
 *
 * 1.0.721-rc.9+f020d61fcb6ef6ebe31e8b3974d429a24c2e10d0
 *
 * The version of the OpenAPI document: 1.0.721-rc.9+f020d61fcb6ef6ebe31e8b3974d429a24c2e10d0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Aida.Sdk.Client;
using Aida.Sdk.Api;
// uncomment below to import models
//using Aida.Sdk.Model;

namespace Aida.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing InkjetTestApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InkjetTestApiTests : IDisposable
    {
        private InkjetTestApi instance;

        public InkjetTestApiTests()
        {
            instance = new InkjetTestApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InkjetTestApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' InkjetTestApi
            //Assert.IsType<InkjetTestApi>(instance);
        }

        /// <summary>
        /// Test GetInkUsage
        /// </summary>
        [Fact]
        public void GetInkUsageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.GetInkUsage();
        }

        /// <summary>
        /// Test OnlyPrintMultipass
        /// </summary>
        [Fact]
        public void OnlyPrintMultipassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PrintQuality? printQuality = null;
            //instance.OnlyPrintMultipass(printQuality);
        }

        /// <summary>
        /// Test OnlyPrintScanning
        /// </summary>
        [Fact]
        public void OnlyPrintScanningTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? printPosition = null;
            //instance.OnlyPrintScanning(printPosition);
        }

        /// <summary>
        /// Test PrintMultipass
        /// </summary>
        [Fact]
        public void PrintMultipassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string imagePath = null;
            //int? x = null;
            //int? y = null;
            //int? angle = null;
            //int? printPosition = null;
            //instance.PrintMultipass(imagePath, x, y, angle, printPosition);
        }

        /// <summary>
        /// Test ReadCartridge
        /// </summary>
        [Fact]
        public void ReadCartridgeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ColorName? colorName = null;
            //var response = instance.ReadCartridge(colorName);
            //Assert.IsType<Cartridge>(response);
        }

        /// <summary>
        /// Test ReadCartridgeFromJson
        /// </summary>
        [Fact]
        public void ReadCartridgeFromJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ReadCartridgeFromJson();
            //Assert.IsType<Cartridge>(response);
        }

        /// <summary>
        /// Test ReadMachineStatus
        /// </summary>
        [Fact]
        public void ReadMachineStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ReadMachineStatus();
        }

        /// <summary>
        /// Test SetMultipassAlgorithm
        /// </summary>
        [Fact]
        public void SetMultipassAlgorithmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? value = null;
            //instance.SetMultipassAlgorithm(value);
        }

        /// <summary>
        /// Test SetPasses
        /// </summary>
        [Fact]
        public void SetPassesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? value = null;
            //instance.SetPasses(value);
        }

        /// <summary>
        /// Test SetPrintAlgorithm
        /// </summary>
        [Fact]
        public void SetPrintAlgorithmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? value = null;
            //instance.SetPrintAlgorithm(value);
        }

        /// <summary>
        /// Test ShowDebugInfo
        /// </summary>
        [Fact]
        public void ShowDebugInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string portName = null;
            //instance.ShowDebugInfo(portName);
        }

        /// <summary>
        /// Test TestWriteCartridges
        /// </summary>
        [Fact]
        public void TestWriteCartridgesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.TestWriteCartridges();
        }

        /// <summary>
        /// Test WriteCartridge
        /// </summary>
        [Fact]
        public void WriteCartridgeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ColorName? colorName = null;
            //int? inkConsumed = null;
            //instance.WriteCartridge(colorName, inkConsumed);
        }

        /// <summary>
        /// Test WriteJsonCartridge
        /// </summary>
        [Fact]
        public void WriteJsonCartridgeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.WriteJsonCartridge();
        }
    }
}
