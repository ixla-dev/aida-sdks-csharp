/*
 * aida
 *
 * 1.0.721-rc.9+f020d61fcb6ef6ebe31e8b3974d429a24c2e10d0
 *
 * The version of the OpenAPI document: 1.0.721-rc.9+f020d61fcb6ef6ebe31e8b3974d429a24c2e10d0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Aida.Sdk.Client;
using Aida.Sdk.Api;
// uncomment below to import models
//using Aida.Sdk.Model;

namespace Aida.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing TransportApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TransportApiTests : IDisposable
    {
        private TransportApi instance;

        public TransportApiTests()
        {
            instance = new TransportApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TransportApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TransportApi
            //Assert.IsType<TransportApi>(instance);
        }

        /// <summary>
        /// Test AidaV1TransportStateRealtimeGet
        /// </summary>
        [Fact]
        public void AidaV1TransportStateRealtimeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AidaV1TransportStateRealtimeGet();
            //Assert.IsType<TransportState>(response);
        }

        /// <summary>
        /// Test BoxTransportCpuReset
        /// </summary>
        [Fact]
        public void BoxTransportCpuResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.BoxTransportCpuReset();
        }

        /// <summary>
        /// Test CanPerformMovement
        /// </summary>
        [Fact]
        public void CanPerformMovementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //string destination = null;
            //instance.CanPerformMovement(source, destination);
        }

        /// <summary>
        /// Test ComputeShortestPathMovePlan
        /// </summary>
        [Fact]
        public void ComputeShortestPathMovePlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //string target = null;
            //instance.ComputeShortestPathMovePlan(source, target);
        }

        /// <summary>
        /// Test ConnectTransport
        /// </summary>
        [Fact]
        public void ConnectTransportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ConnectTransport();
        }

        /// <summary>
        /// Test Disconnect
        /// </summary>
        [Fact]
        public void DisconnectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Disconnect();
        }

        /// <summary>
        /// Test EjectAllCards
        /// </summary>
        [Fact]
        public void EjectAllCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.EjectAllCards();
        }

        /// <summary>
        /// Test EjectCard
        /// </summary>
        [Fact]
        public void EjectCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //instance.EjectCard(source);
        }

        /// <summary>
        /// Test Feed
        /// </summary>
        [Fact]
        public void FeedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //string destination = null;
            //instance.Feed(source, destination);
        }

        /// <summary>
        /// Test FlipCard
        /// </summary>
        [Fact]
        public void FlipCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int moduleId = null;
            //instance.FlipCard(moduleId);
        }

        /// <summary>
        /// Test GetAvailableSources
        /// </summary>
        [Fact]
        public void GetAvailableSourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAvailableSources();
            //Assert.IsType<List<TransportPositionDto>>(response);
        }

        /// <summary>
        /// Test GetAvailableTargets
        /// </summary>
        [Fact]
        public void GetAvailableTargetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //var response = instance.GetAvailableTargets(source);
            //Assert.IsType<List<TransportPositionDto>>(response);
        }

        /// <summary>
        /// Test GetBoxModuleTransportState
        /// </summary>
        [Fact]
        public void GetBoxModuleTransportStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string moduleId = null;
            //instance.GetBoxModuleTransportState(moduleId);
        }

        /// <summary>
        /// Test GetMachineExists
        /// </summary>
        [Fact]
        public void GetMachineExistsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMachineExists();
            //Assert.IsType<List<TransportPositionDto>>(response);
        }

        /// <summary>
        /// Test GetMachineInputs
        /// </summary>
        [Fact]
        public void GetMachineInputsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMachineInputs();
            //Assert.IsType<List<TransportPositionDto>>(response);
        }

        /// <summary>
        /// Test GetModuleStatus
        /// </summary>
        [Fact]
        public void GetModuleStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.GetModuleStatus();
        }

        /// <summary>
        /// Test GetModules
        /// </summary>
        [Fact]
        public void GetModulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetModules();
            //Assert.IsType<List<TransportModuleState>>(response);
        }

        /// <summary>
        /// Test GetShortestPath
        /// </summary>
        [Fact]
        public void GetShortestPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //string target = null;
            //instance.GetShortestPath(source, target);
        }

        /// <summary>
        /// Test GetTransportPosition
        /// </summary>
        [Fact]
        public void GetTransportPositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string position = null;
            //var response = instance.GetTransportPosition(position);
            //Assert.IsType<TransportPositionDto>(response);
        }

        /// <summary>
        /// Test GetTransportPositions
        /// </summary>
        [Fact]
        public void GetTransportPositionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? includeAliases = null;
            //var response = instance.GetTransportPositions(includeAliases);
            //Assert.IsType<List<TransportPositionDto>>(response);
        }

        /// <summary>
        /// Test GetTransportState
        /// </summary>
        [Fact]
        public void GetTransportStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTransportState();
            //Assert.IsType<TransportState>(response);
        }

        /// <summary>
        /// Test Move
        /// </summary>
        [Fact]
        public void MoveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //string destination = null;
            //instance.Move(source, destination);
        }

        /// <summary>
        /// Test MoveFirstAvailableCardToPosition
        /// </summary>
        [Fact]
        public void MoveFirstAvailableCardToPositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string target = null;
            //instance.MoveFirstAvailableCardToPosition(target);
        }

        /// <summary>
        /// Test PathExist
        /// </summary>
        [Fact]
        public void PathExistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //string target = null;
            //var response = instance.PathExist(source, target);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test Reset
        /// </summary>
        [Fact]
        public void ResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Reset();
        }

        /// <summary>
        /// Test ResetModule
        /// </summary>
        [Fact]
        public void ResetModuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string moduleId = null;
            //instance.ResetModule(moduleId);
        }

        /// <summary>
        /// Test SetSerialNumber
        /// </summary>
        [Fact]
        public void SetSerialNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string body = null;
            //instance.SetSerialNumber(id, body);
        }

        /// <summary>
        /// Test Shift
        /// </summary>
        [Fact]
        public void ShiftTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? supportId = null;
            //instance.Shift(supportId);
        }
    }
}
