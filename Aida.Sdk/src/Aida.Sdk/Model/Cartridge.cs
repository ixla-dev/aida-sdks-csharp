/*
 * aida
 *
 * 1.0.721-rc.9+f020d61fcb6ef6ebe31e8b3974d429a24c2e10d0
 *
 * The version of the OpenAPI document: 1.0.721-rc.9+f020d61fcb6ef6ebe31e8b3974d429a24c2e10d0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// Cartridge
    /// </summary>
    [DataContract(Name = "Cartridge")]
    public partial class Cartridge : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CartridgeColor
        /// </summary>
        [DataMember(Name = "cartridgeColor", EmitDefaultValue = false)]
        public ColorName? CartridgeColor { get; set; }

        /// <summary>
        /// Gets or Sets CartridgeStatus
        /// </summary>
        [DataMember(Name = "cartridgeStatus", EmitDefaultValue = false)]
        public XPrintCartridgeStatus? CartridgeStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cartridge" /> class.
        /// </summary>
        /// <param name="cartridgeProductionDate">cartridgeProductionDate.</param>
        /// <param name="cartridgeLineSerialNumber">cartridgeLineSerialNumber.</param>
        /// <param name="cartridgeInkType">cartridgeInkType.</param>
        /// <param name="cartridgeColor">cartridgeColor.</param>
        /// <param name="cartridgeInkProductionDate">cartridgeInkProductionDate.</param>
        /// <param name="cartridgeInkExpireDate">cartridgeInkExpireDate.</param>
        /// <param name="cartridgeInitialVolume">cartridgeInitialVolume.</param>
        /// <param name="cartridgeInkConsumption">cartridgeInkConsumption.</param>
        /// <param name="cartridgeStatus">cartridgeStatus.</param>
        public Cartridge(int cartridgeProductionDate = default(int), int cartridgeLineSerialNumber = default(int), int cartridgeInkType = default(int), ColorName? cartridgeColor = default(ColorName?), int cartridgeInkProductionDate = default(int), int cartridgeInkExpireDate = default(int), int cartridgeInitialVolume = default(int), long cartridgeInkConsumption = default(long), XPrintCartridgeStatus? cartridgeStatus = default(XPrintCartridgeStatus?))
        {
            this.CartridgeProductionDate = cartridgeProductionDate;
            this.CartridgeLineSerialNumber = cartridgeLineSerialNumber;
            this.CartridgeInkType = cartridgeInkType;
            this.CartridgeColor = cartridgeColor;
            this.CartridgeInkProductionDate = cartridgeInkProductionDate;
            this.CartridgeInkExpireDate = cartridgeInkExpireDate;
            this.CartridgeInitialVolume = cartridgeInitialVolume;
            this.CartridgeInkConsumption = cartridgeInkConsumption;
            this.CartridgeStatus = cartridgeStatus;
        }

        /// <summary>
        /// Gets or Sets CartridgeProductionDate
        /// </summary>
        [DataMember(Name = "cartridgeProductionDate", EmitDefaultValue = false)]
        public int CartridgeProductionDate { get; set; }

        /// <summary>
        /// Gets or Sets CartridgeLineSerialNumber
        /// </summary>
        [DataMember(Name = "cartridgeLineSerialNumber", EmitDefaultValue = false)]
        public int CartridgeLineSerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets CartridgeInkType
        /// </summary>
        [DataMember(Name = "cartridgeInkType", EmitDefaultValue = false)]
        public int CartridgeInkType { get; set; }

        /// <summary>
        /// Gets or Sets CartridgeInkProductionDate
        /// </summary>
        [DataMember(Name = "cartridgeInkProductionDate", EmitDefaultValue = false)]
        public int CartridgeInkProductionDate { get; set; }

        /// <summary>
        /// Gets or Sets CartridgeInkExpireDate
        /// </summary>
        [DataMember(Name = "cartridgeInkExpireDate", EmitDefaultValue = false)]
        public int CartridgeInkExpireDate { get; set; }

        /// <summary>
        /// Gets or Sets CartridgeInitialVolume
        /// </summary>
        [DataMember(Name = "cartridgeInitialVolume", EmitDefaultValue = false)]
        public int CartridgeInitialVolume { get; set; }

        /// <summary>
        /// Gets or Sets CartridgeInkConsumption
        /// </summary>
        [DataMember(Name = "cartridgeInkConsumption", EmitDefaultValue = false)]
        public long CartridgeInkConsumption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Cartridge {\n");
            sb.Append("  CartridgeProductionDate: ").Append(CartridgeProductionDate).Append("\n");
            sb.Append("  CartridgeLineSerialNumber: ").Append(CartridgeLineSerialNumber).Append("\n");
            sb.Append("  CartridgeInkType: ").Append(CartridgeInkType).Append("\n");
            sb.Append("  CartridgeColor: ").Append(CartridgeColor).Append("\n");
            sb.Append("  CartridgeInkProductionDate: ").Append(CartridgeInkProductionDate).Append("\n");
            sb.Append("  CartridgeInkExpireDate: ").Append(CartridgeInkExpireDate).Append("\n");
            sb.Append("  CartridgeInitialVolume: ").Append(CartridgeInitialVolume).Append("\n");
            sb.Append("  CartridgeInkConsumption: ").Append(CartridgeInkConsumption).Append("\n");
            sb.Append("  CartridgeStatus: ").Append(CartridgeStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
