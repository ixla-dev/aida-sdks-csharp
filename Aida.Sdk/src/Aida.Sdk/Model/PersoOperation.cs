/*
 * aida
 *
 * 1.0.704.0
 *
 * The version of the OpenAPI document: 1.0.704.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// PersoOperation
    /// </summary>
    [DataContract(Name = "PersoOperation")]
    public partial class PersoOperation : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OperationType
        /// </summary>
        [DataMember(Name = "operationType", EmitDefaultValue = false)]
        public PersoOperationTypes? OperationType { get; set; }

        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name = "outcome", EmitDefaultValue = false)]
        public PersoOperationOutcome? Outcome { get; set; }

        /// <summary>
        /// Gets or Sets RequiredSide
        /// </summary>
        [DataMember(Name = "requiredSide", EmitDefaultValue = false)]
        public SupportSide? RequiredSide { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PersoOperation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="workflowInstanceId">workflowInstanceId.</param>
        /// <param name="operationType">operationType.</param>
        /// <param name="requiredPositionId">requiredPositionId.</param>
        /// <param name="parkingPositionId">parkingPositionId.</param>
        /// <param name="maxRetries">maxRetries.</param>
        /// <param name="outcome">outcome.</param>
        /// <param name="simulated">simulated.</param>
        /// <param name="simulatedDurationMs">simulatedDurationMs.</param>
        /// <param name="indexByOperationType">indexByOperationType.</param>
        /// <param name="operationGroup">operationGroup.</param>
        /// <param name="unlocksWorkflowStart">unlocksWorkflowStart.</param>
        /// <param name="locksLaser">locksLaser.</param>
        /// <param name="unlocksLaser">unlocksLaser.</param>
        /// <param name="requiredSide">requiredSide.</param>
        public PersoOperation(int id = default(int), string name = default(string), string workflowInstanceId = default(string), PersoOperationTypes? operationType = default(PersoOperationTypes?), string requiredPositionId = default(string), string parkingPositionId = default(string), int maxRetries = default(int), PersoOperationOutcome? outcome = default(PersoOperationOutcome?), bool simulated = default(bool), int simulatedDurationMs = default(int), int indexByOperationType = default(int), string operationGroup = default(string), bool unlocksWorkflowStart = default(bool), bool locksLaser = default(bool), bool unlocksLaser = default(bool), SupportSide? requiredSide = default(SupportSide?))
        {
            this.Id = id;
            this.Name = name;
            this.WorkflowInstanceId = workflowInstanceId;
            this.OperationType = operationType;
            this.RequiredPositionId = requiredPositionId;
            this.ParkingPositionId = parkingPositionId;
            this.MaxRetries = maxRetries;
            this.Outcome = outcome;
            this.Simulated = simulated;
            this.SimulatedDurationMs = simulatedDurationMs;
            this.IndexByOperationType = indexByOperationType;
            this.OperationGroup = operationGroup;
            this.UnlocksWorkflowStart = unlocksWorkflowStart;
            this.LocksLaser = locksLaser;
            this.UnlocksLaser = unlocksLaser;
            this.RequiredSide = requiredSide;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowInstanceId
        /// </summary>
        [DataMember(Name = "workflowInstanceId", EmitDefaultValue = true)]
        public string WorkflowInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets RequiredPositionId
        /// </summary>
        [DataMember(Name = "requiredPositionId", EmitDefaultValue = true)]
        public string RequiredPositionId { get; set; }

        /// <summary>
        /// Gets or Sets ParkingPositionId
        /// </summary>
        [DataMember(Name = "parkingPositionId", EmitDefaultValue = true)]
        public string ParkingPositionId { get; set; }

        /// <summary>
        /// Gets or Sets MaxRetries
        /// </summary>
        [DataMember(Name = "maxRetries", EmitDefaultValue = false)]
        public int MaxRetries { get; set; }

        /// <summary>
        /// Gets or Sets IsDestructiveOperation
        /// </summary>
        [DataMember(Name = "isDestructiveOperation", EmitDefaultValue = true)]
        public bool IsDestructiveOperation { get; private set; }

        /// <summary>
        /// Returns false as IsDestructiveOperation should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDestructiveOperation()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Simulated
        /// </summary>
        [DataMember(Name = "simulated", EmitDefaultValue = true)]
        public bool Simulated { get; set; }

        /// <summary>
        /// Gets or Sets SimulatedDurationMs
        /// </summary>
        [DataMember(Name = "simulatedDurationMs", EmitDefaultValue = false)]
        public int SimulatedDurationMs { get; set; }

        /// <summary>
        /// Gets or Sets IndexByOperationType
        /// </summary>
        [DataMember(Name = "indexByOperationType", EmitDefaultValue = false)]
        public int IndexByOperationType { get; set; }

        /// <summary>
        /// Gets or Sets OperationGroup
        /// </summary>
        [DataMember(Name = "operationGroup", EmitDefaultValue = true)]
        public string OperationGroup { get; set; }

        /// <summary>
        /// Gets or Sets CanBeRetried
        /// </summary>
        [DataMember(Name = "canBeRetried", EmitDefaultValue = true)]
        public bool CanBeRetried { get; private set; }

        /// <summary>
        /// Returns false as CanBeRetried should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCanBeRetried()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UnlocksWorkflowStart
        /// </summary>
        [DataMember(Name = "unlocksWorkflowStart", EmitDefaultValue = true)]
        public bool UnlocksWorkflowStart { get; set; }

        /// <summary>
        /// Gets or Sets LocksLaser
        /// </summary>
        [DataMember(Name = "locksLaser", EmitDefaultValue = true)]
        public bool LocksLaser { get; set; }

        /// <summary>
        /// Gets or Sets UnlocksLaser
        /// </summary>
        [DataMember(Name = "unlocksLaser", EmitDefaultValue = true)]
        public bool UnlocksLaser { get; set; }

        /// <summary>
        /// Gets or Sets Executed
        /// </summary>
        [DataMember(Name = "executed", EmitDefaultValue = true)]
        public bool Executed { get; private set; }

        /// <summary>
        /// Returns false as Executed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExecuted()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersoOperation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  WorkflowInstanceId: ").Append(WorkflowInstanceId).Append("\n");
            sb.Append("  OperationType: ").Append(OperationType).Append("\n");
            sb.Append("  RequiredPositionId: ").Append(RequiredPositionId).Append("\n");
            sb.Append("  ParkingPositionId: ").Append(ParkingPositionId).Append("\n");
            sb.Append("  MaxRetries: ").Append(MaxRetries).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  IsDestructiveOperation: ").Append(IsDestructiveOperation).Append("\n");
            sb.Append("  Simulated: ").Append(Simulated).Append("\n");
            sb.Append("  SimulatedDurationMs: ").Append(SimulatedDurationMs).Append("\n");
            sb.Append("  IndexByOperationType: ").Append(IndexByOperationType).Append("\n");
            sb.Append("  OperationGroup: ").Append(OperationGroup).Append("\n");
            sb.Append("  CanBeRetried: ").Append(CanBeRetried).Append("\n");
            sb.Append("  UnlocksWorkflowStart: ").Append(UnlocksWorkflowStart).Append("\n");
            sb.Append("  LocksLaser: ").Append(LocksLaser).Append("\n");
            sb.Append("  UnlocksLaser: ").Append(UnlocksLaser).Append("\n");
            sb.Append("  RequiredSide: ").Append(RequiredSide).Append("\n");
            sb.Append("  Executed: ").Append(Executed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
