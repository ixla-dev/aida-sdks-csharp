/*
 * aida
 *
 * 1.0.713
 *
 * The version of the OpenAPI document: 1.0.713
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// DisplayIssuanceStatusDto
    /// </summary>
    [DataContract(Name = "DisplayIssuanceStatusDto")]
    public partial class DisplayIssuanceStatusDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayIssuanceStatusDto" /> class.
        /// </summary>
        /// <param name="jobsPerHour">jobsPerHour.</param>
        /// <param name="jobAvgDuration">jobAvgDuration.</param>
        /// <param name="jobsRunning">jobsRunning.</param>
        /// <param name="jobsCompleted">jobsCompleted.</param>
        /// <param name="jobsFaulted">jobsFaulted.</param>
        /// <param name="jobsInQueue">jobsInQueue.</param>
        public DisplayIssuanceStatusDto(int jobsPerHour = default(int), int jobAvgDuration = default(int), int jobsRunning = default(int), int jobsCompleted = default(int), int jobsFaulted = default(int), int jobsInQueue = default(int))
        {
            this.JobsPerHour = jobsPerHour;
            this.JobAvgDuration = jobAvgDuration;
            this.JobsRunning = jobsRunning;
            this.JobsCompleted = jobsCompleted;
            this.JobsFaulted = jobsFaulted;
            this.JobsInQueue = jobsInQueue;
        }

        /// <summary>
        /// Gets or Sets JobsPerHour
        /// </summary>
        [DataMember(Name = "jobsPerHour", EmitDefaultValue = false)]
        public int JobsPerHour { get; set; }

        /// <summary>
        /// Gets or Sets JobAvgDuration
        /// </summary>
        [DataMember(Name = "jobAvgDuration", EmitDefaultValue = false)]
        public int JobAvgDuration { get; set; }

        /// <summary>
        /// Gets or Sets JobsRunning
        /// </summary>
        [DataMember(Name = "jobsRunning", EmitDefaultValue = false)]
        public int JobsRunning { get; set; }

        /// <summary>
        /// Gets or Sets JobsCompleted
        /// </summary>
        [DataMember(Name = "jobsCompleted", EmitDefaultValue = false)]
        public int JobsCompleted { get; set; }

        /// <summary>
        /// Gets or Sets JobsFaulted
        /// </summary>
        [DataMember(Name = "jobsFaulted", EmitDefaultValue = false)]
        public int JobsFaulted { get; set; }

        /// <summary>
        /// Gets or Sets JobsInQueue
        /// </summary>
        [DataMember(Name = "jobsInQueue", EmitDefaultValue = false)]
        public int JobsInQueue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DisplayIssuanceStatusDto {\n");
            sb.Append("  JobsPerHour: ").Append(JobsPerHour).Append("\n");
            sb.Append("  JobAvgDuration: ").Append(JobAvgDuration).Append("\n");
            sb.Append("  JobsRunning: ").Append(JobsRunning).Append("\n");
            sb.Append("  JobsCompleted: ").Append(JobsCompleted).Append("\n");
            sb.Append("  JobsFaulted: ").Append(JobsFaulted).Append("\n");
            sb.Append("  JobsInQueue: ").Append(JobsInQueue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
