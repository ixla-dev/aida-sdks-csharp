/*
 * aida
 *
 * 1.0.704.0
 *
 * The version of the OpenAPI document: 1.0.704.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// MarkGroup
    /// </summary>
    [DataContract(Name = "MarkGroup")]
    public partial class MarkGroup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkGroup" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="scannerId">scannerId.</param>
        /// <param name="positionId">positionId.</param>
        /// <param name="supportSide">supportSide.</param>
        /// <param name="deviceId">deviceId.</param>
        /// <param name="offsetX">offsetX.</param>
        /// <param name="offsetY">offsetY.</param>
        /// <param name="rotationAngle">rotationAngle.</param>
        /// <param name="autoPosSettings">autoPosSettings.</param>
        /// <param name="entities">entities.</param>
        /// <param name="expectedMarkDurationMs">expectedMarkDurationMs.</param>
        /// <param name="measuredMarkDurationMs">measuredMarkDurationMs.</param>
        /// <param name="jobTemplateId">jobTemplateId.</param>
        /// <param name="index">index.</param>
        public MarkGroup(int id = default(int), string name = default(string), string displayName = default(string), string scannerId = default(string), string positionId = default(string), string supportSide = default(string), string deviceId = default(string), double offsetX = default(double), double offsetY = default(double), double rotationAngle = default(double), JobTemplateLayoutAutoPosSettings autoPosSettings = default(JobTemplateLayoutAutoPosSettings), List<MarkGroupScannerEntity> entities = default(List<MarkGroupScannerEntity>), double expectedMarkDurationMs = default(double), double measuredMarkDurationMs = default(double), int jobTemplateId = default(int), int index = default(int))
        {
            this.Id = id;
            this.Name = name;
            this.DisplayName = displayName;
            this.ScannerId = scannerId;
            this.PositionId = positionId;
            this.SupportSide = supportSide;
            this.DeviceId = deviceId;
            this.OffsetX = offsetX;
            this.OffsetY = offsetY;
            this.RotationAngle = rotationAngle;
            this.AutoPosSettings = autoPosSettings;
            this.Entities = entities;
            this.ExpectedMarkDurationMs = expectedMarkDurationMs;
            this.MeasuredMarkDurationMs = measuredMarkDurationMs;
            this.JobTemplateId = jobTemplateId;
            this.Index = index;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ScannerId
        /// </summary>
        [DataMember(Name = "scannerId", EmitDefaultValue = true)]
        public string ScannerId { get; set; }

        /// <summary>
        /// Gets or Sets PositionId
        /// </summary>
        [DataMember(Name = "positionId", EmitDefaultValue = true)]
        public string PositionId { get; set; }

        /// <summary>
        /// Gets or Sets SupportSide
        /// </summary>
        [DataMember(Name = "supportSide", EmitDefaultValue = true)]
        public string SupportSide { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name = "deviceId", EmitDefaultValue = true)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets OffsetX
        /// </summary>
        [DataMember(Name = "offsetX", EmitDefaultValue = false)]
        public double OffsetX { get; set; }

        /// <summary>
        /// Gets or Sets OffsetY
        /// </summary>
        [DataMember(Name = "offsetY", EmitDefaultValue = false)]
        public double OffsetY { get; set; }

        /// <summary>
        /// Gets or Sets RotationAngle
        /// </summary>
        [DataMember(Name = "rotationAngle", EmitDefaultValue = false)]
        public double RotationAngle { get; set; }

        /// <summary>
        /// Gets or Sets AutoPosSettings
        /// </summary>
        [DataMember(Name = "autoPosSettings", EmitDefaultValue = false)]
        public JobTemplateLayoutAutoPosSettings AutoPosSettings { get; set; }

        /// <summary>
        /// Gets or Sets Entities
        /// </summary>
        [DataMember(Name = "entities", EmitDefaultValue = true)]
        public List<MarkGroupScannerEntity> Entities { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedMarkDurationMs
        /// </summary>
        [DataMember(Name = "expectedMarkDurationMs", EmitDefaultValue = false)]
        public double ExpectedMarkDurationMs { get; set; }

        /// <summary>
        /// Gets or Sets MeasuredMarkDurationMs
        /// </summary>
        [DataMember(Name = "measuredMarkDurationMs", EmitDefaultValue = false)]
        public double MeasuredMarkDurationMs { get; set; }

        /// <summary>
        /// Gets or Sets JobTemplateId
        /// </summary>
        [DataMember(Name = "jobTemplateId", EmitDefaultValue = false)]
        public int JobTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarkGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ScannerId: ").Append(ScannerId).Append("\n");
            sb.Append("  PositionId: ").Append(PositionId).Append("\n");
            sb.Append("  SupportSide: ").Append(SupportSide).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  OffsetX: ").Append(OffsetX).Append("\n");
            sb.Append("  OffsetY: ").Append(OffsetY).Append("\n");
            sb.Append("  RotationAngle: ").Append(RotationAngle).Append("\n");
            sb.Append("  AutoPosSettings: ").Append(AutoPosSettings).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  ExpectedMarkDurationMs: ").Append(ExpectedMarkDurationMs).Append("\n");
            sb.Append("  MeasuredMarkDurationMs: ").Append(MeasuredMarkDurationMs).Append("\n");
            sb.Append("  JobTemplateId: ").Append(JobTemplateId).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
