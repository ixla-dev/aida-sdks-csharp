/*
 * aida
 *
 * 1.0.703.2
 *
 * The version of the OpenAPI document: 1.0.703.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// JobTemplateDto
    /// </summary>
    [DataContract(Name = "JobTemplateDto")]
    public partial class JobTemplateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobTemplateDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="expectedMarkDuration">expectedMarkDuration.</param>
        /// <param name="workingArea">workingArea.</param>
        /// <param name="readBackConfiguration">readBackConfiguration.</param>
        /// <param name="chipEncodingConfiguration">chipEncodingConfiguration.</param>
        /// <param name="magStripeConfiguration">magStripeConfiguration.</param>
        /// <param name="webhooksTarget">webhooksTarget.</param>
        /// <param name="file">file.</param>
        /// <param name="dataSourceConfiguration">dataSourceConfiguration.</param>
        /// <param name="layouts">layouts.</param>
        /// <param name="inkjetLayouts">inkjetLayouts.</param>
        /// <param name="markGroups">markGroups.</param>
        /// <param name="ocrSettings">ocrSettings.</param>
        /// <param name="autoPosEnabled">autoPosEnabled.</param>
        public JobTemplateDto(int? id = default(int?), string name = default(string), string description = default(string), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?), string expectedMarkDuration = default(string), DRectangleDto workingArea = default(DRectangleDto), ReadBackConfigurationDto readBackConfiguration = default(ReadBackConfigurationDto), ChipEncodingConfigurationDto chipEncodingConfiguration = default(ChipEncodingConfigurationDto), MagneticStripeConfigurationDto magStripeConfiguration = default(MagneticStripeConfigurationDto), WebhooksTargetDto webhooksTarget = default(WebhooksTargetDto), FileDto file = default(FileDto), DataSourceConfigurationDto dataSourceConfiguration = default(DataSourceConfigurationDto), List<JobTemplateLayoutDto> layouts = default(List<JobTemplateLayoutDto>), List<JobTemplateInkjetLayoutDto> inkjetLayouts = default(List<JobTemplateInkjetLayoutDto>), List<ScannerMarkGroupDto> markGroups = default(List<ScannerMarkGroupDto>), List<JobTemplateOcrSettingsDto> ocrSettings = default(List<JobTemplateOcrSettingsDto>), bool autoPosEnabled = default(bool))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.ExpectedMarkDuration = expectedMarkDuration;
            this.WorkingArea = workingArea;
            this.ReadBackConfiguration = readBackConfiguration;
            this.ChipEncodingConfiguration = chipEncodingConfiguration;
            this.MagStripeConfiguration = magStripeConfiguration;
            this.WebhooksTarget = webhooksTarget;
            this.File = file;
            this.DataSourceConfiguration = dataSourceConfiguration;
            this.Layouts = layouts;
            this.InkjetLayouts = inkjetLayouts;
            this.MarkGroups = markGroups;
            this.OcrSettings = ocrSettings;
            this.AutoPosEnabled = autoPosEnabled;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /// <example>2019-12-10T10:06:50.466318Z</example>
        [DataMember(Name = "createdAt", EmitDefaultValue = true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /// <example>2019-12-10T10:06:50.466318Z</example>
        [DataMember(Name = "updatedAt", EmitDefaultValue = true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedMarkDuration
        /// </summary>
        /// <example>25:01:01.001</example>
        [DataMember(Name = "expectedMarkDuration", EmitDefaultValue = false)]
        public string ExpectedMarkDuration { get; set; }

        /// <summary>
        /// Gets or Sets WorkingArea
        /// </summary>
        [DataMember(Name = "workingArea", EmitDefaultValue = false)]
        public DRectangleDto WorkingArea { get; set; }

        /// <summary>
        /// Gets or Sets ReadBackConfiguration
        /// </summary>
        [DataMember(Name = "readBackConfiguration", EmitDefaultValue = false)]
        public ReadBackConfigurationDto ReadBackConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets ChipEncodingConfiguration
        /// </summary>
        [DataMember(Name = "chipEncodingConfiguration", EmitDefaultValue = false)]
        public ChipEncodingConfigurationDto ChipEncodingConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets MagStripeConfiguration
        /// </summary>
        [DataMember(Name = "magStripeConfiguration", EmitDefaultValue = false)]
        public MagneticStripeConfigurationDto MagStripeConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets WebhooksTarget
        /// </summary>
        [DataMember(Name = "webhooksTarget", EmitDefaultValue = false)]
        public WebhooksTargetDto WebhooksTarget { get; set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name = "file", EmitDefaultValue = false)]
        public FileDto File { get; set; }

        /// <summary>
        /// Gets or Sets DataSourceConfiguration
        /// </summary>
        [DataMember(Name = "dataSourceConfiguration", EmitDefaultValue = false)]
        public DataSourceConfigurationDto DataSourceConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets Layouts
        /// </summary>
        [DataMember(Name = "layouts", EmitDefaultValue = true)]
        public List<JobTemplateLayoutDto> Layouts { get; set; }

        /// <summary>
        /// Gets or Sets InkjetLayouts
        /// </summary>
        [DataMember(Name = "inkjetLayouts", EmitDefaultValue = true)]
        public List<JobTemplateInkjetLayoutDto> InkjetLayouts { get; set; }

        /// <summary>
        /// Gets or Sets MarkGroups
        /// </summary>
        [DataMember(Name = "markGroups", EmitDefaultValue = true)]
        public List<ScannerMarkGroupDto> MarkGroups { get; set; }

        /// <summary>
        /// Gets or Sets OcrSettings
        /// </summary>
        [DataMember(Name = "ocrSettings", EmitDefaultValue = true)]
        public List<JobTemplateOcrSettingsDto> OcrSettings { get; set; }

        /// <summary>
        /// Gets or Sets AutoPosEnabled
        /// </summary>
        [DataMember(Name = "autoPosEnabled", EmitDefaultValue = true)]
        public bool AutoPosEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobTemplateDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ExpectedMarkDuration: ").Append(ExpectedMarkDuration).Append("\n");
            sb.Append("  WorkingArea: ").Append(WorkingArea).Append("\n");
            sb.Append("  ReadBackConfiguration: ").Append(ReadBackConfiguration).Append("\n");
            sb.Append("  ChipEncodingConfiguration: ").Append(ChipEncodingConfiguration).Append("\n");
            sb.Append("  MagStripeConfiguration: ").Append(MagStripeConfiguration).Append("\n");
            sb.Append("  WebhooksTarget: ").Append(WebhooksTarget).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  DataSourceConfiguration: ").Append(DataSourceConfiguration).Append("\n");
            sb.Append("  Layouts: ").Append(Layouts).Append("\n");
            sb.Append("  InkjetLayouts: ").Append(InkjetLayouts).Append("\n");
            sb.Append("  MarkGroups: ").Append(MarkGroups).Append("\n");
            sb.Append("  OcrSettings: ").Append(OcrSettings).Append("\n");
            sb.Append("  AutoPosEnabled: ").Append(AutoPosEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
