/*
 * aida
 *
 * 1.0.721-rc.9+f020d61fcb6ef6ebe31e8b3974d429a24c2e10d0
 *
 * The version of the OpenAPI document: 1.0.721-rc.9+f020d61fcb6ef6ebe31e8b3974d429a24c2e10d0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// MachineStatusDto
    /// </summary>
    [DataContract(Name = "MachineStatusDto")]
    public partial class MachineStatusDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SchedulerStatus
        /// </summary>
        [DataMember(Name = "schedulerStatus", EmitDefaultValue = false)]
        public WorkflowSchedulerStatus? SchedulerStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineStatusDto" /> class.
        /// </summary>
        /// <param name="transport">transport.</param>
        /// <param name="laserBoards">laserBoards.</param>
        /// <param name="hasOpenInterlocks">hasOpenInterlocks.</param>
        /// <param name="allFeedersEmpty">allFeedersEmpty.</param>
        /// <param name="schedulerStatus">schedulerStatus.</param>
        public MachineStatusDto(TransportState transport = default(TransportState), List<LaserBoardState> laserBoards = default(List<LaserBoardState>), bool hasOpenInterlocks = default(bool), bool allFeedersEmpty = default(bool), WorkflowSchedulerStatus? schedulerStatus = default(WorkflowSchedulerStatus?))
        {
            this.Transport = transport;
            this.LaserBoards = laserBoards;
            this.HasOpenInterlocks = hasOpenInterlocks;
            this.AllFeedersEmpty = allFeedersEmpty;
            this.SchedulerStatus = schedulerStatus;
        }

        /// <summary>
        /// Gets or Sets Transport
        /// </summary>
        [DataMember(Name = "transport", EmitDefaultValue = false)]
        public TransportState Transport { get; set; }

        /// <summary>
        /// Gets or Sets LaserBoards
        /// </summary>
        [DataMember(Name = "laserBoards", EmitDefaultValue = true)]
        public List<LaserBoardState> LaserBoards { get; set; }

        /// <summary>
        /// Gets or Sets HasOpenInterlocks
        /// </summary>
        [DataMember(Name = "hasOpenInterlocks", EmitDefaultValue = true)]
        public bool HasOpenInterlocks { get; set; }

        /// <summary>
        /// Gets or Sets AllFeedersEmpty
        /// </summary>
        [DataMember(Name = "allFeedersEmpty", EmitDefaultValue = true)]
        public bool AllFeedersEmpty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MachineStatusDto {\n");
            sb.Append("  Transport: ").Append(Transport).Append("\n");
            sb.Append("  LaserBoards: ").Append(LaserBoards).Append("\n");
            sb.Append("  HasOpenInterlocks: ").Append(HasOpenInterlocks).Append("\n");
            sb.Append("  AllFeedersEmpty: ").Append(AllFeedersEmpty).Append("\n");
            sb.Append("  SchedulerStatus: ").Append(SchedulerStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
