/*
 * aida
 *
 * 1.0.721-rc.9+f020d61fcb6ef6ebe31e8b3974d429a24c2e10d0
 *
 * The version of the OpenAPI document: 1.0.721-rc.9+f020d61fcb6ef6ebe31e8b3974d429a24c2e10d0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// Defines XPrintCartridgeStatus
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum XPrintCartridgeStatus
    {
        /// <summary>
        /// Enum NOERR for value: NO_ERR
        /// </summary>
        [EnumMember(Value = "NO_ERR")]
        NOERR = 1,

        /// <summary>
        /// Enum INKLOW for value: INK_LOW
        /// </summary>
        [EnumMember(Value = "INK_LOW")]
        INKLOW = 2,

        /// <summary>
        /// Enum INKEMPTY for value: INK_EMPTY
        /// </summary>
        [EnumMember(Value = "INK_EMPTY")]
        INKEMPTY = 3,

        /// <summary>
        /// Enum INKEXPIRED for value: INK_EXPIRED
        /// </summary>
        [EnumMember(Value = "INK_EXPIRED")]
        INKEXPIRED = 4,

        /// <summary>
        /// Enum INKWRONG for value: INK_WRONG
        /// </summary>
        [EnumMember(Value = "INK_WRONG")]
        INKWRONG = 5,

        /// <summary>
        /// Enum CRCERR for value: CRC_ERR
        /// </summary>
        [EnumMember(Value = "CRC_ERR")]
        CRCERR = 6,

        /// <summary>
        /// Enum MISSING for value: MISSING
        /// </summary>
        [EnumMember(Value = "MISSING")]
        MISSING = 7,

        /// <summary>
        /// Enum UNRECOVERABLEERR for value: UNRECOVERABLE_ERR
        /// </summary>
        [EnumMember(Value = "UNRECOVERABLE_ERR")]
        UNRECOVERABLEERR = 8,

        /// <summary>
        /// Enum INVALID for value: INVALID
        /// </summary>
        [EnumMember(Value = "INVALID")]
        INVALID = 9
    }

}
