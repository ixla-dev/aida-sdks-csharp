/*
 * aida
 *
 * 1.0.713
 *
 * The version of the OpenAPI document: 1.0.713
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// ChipReadBackConfigurationDto
    /// </summary>
    [DataContract(Name = "ChipReadBackConfigurationDto")]
    [JsonConverter(typeof(JsonSubtypes), "Discriminator")]
    public partial class ChipReadBackConfigurationDto : ReadBackConfigurationDto, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ReaderAccessType
        /// </summary>
        [DataMember(Name = "readerAccessType", EmitDefaultValue = false)]
        public ReaderAccessType? ReaderAccessType { get; set; }

        /// <summary>
        /// Gets or Sets ReaderInterfaceType
        /// </summary>
        [DataMember(Name = "readerInterfaceType", EmitDefaultValue = false)]
        public ReaderInterfaceType? ReaderInterfaceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChipReadBackConfigurationDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChipReadBackConfigurationDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChipReadBackConfigurationDto" /> class.
        /// </summary>
        /// <param name="readerAccessType">readerAccessType.</param>
        /// <param name="readerInterfaceType">readerInterfaceType.</param>
        /// <param name="discriminator">discriminator (required) (default to &quot;ChipReadBackConfigurationDto&quot;).</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="readBackType">readBackType.</param>
        /// <param name="requiredSide">requiredSide.</param>
        /// <param name="jobTemplateId">jobTemplateId.</param>
        public ChipReadBackConfigurationDto(ReaderAccessType? readerAccessType = default(ReaderAccessType?), ReaderInterfaceType? readerInterfaceType = default(ReaderInterfaceType?), string discriminator = @"ChipReadBackConfigurationDto", int id = default(int), string name = default(string), ReadBackType? readBackType = default(ReadBackType?), SupportSide? requiredSide = default(SupportSide?), int jobTemplateId = default(int)) : base(discriminator, id, name, readBackType, requiredSide, jobTemplateId)
        {
            this.ReaderAccessType = readerAccessType;
            this.ReaderInterfaceType = readerInterfaceType;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChipReadBackConfigurationDto {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ReaderAccessType: ").Append(ReaderAccessType).Append("\n");
            sb.Append("  ReaderInterfaceType: ").Append(ReaderInterfaceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
