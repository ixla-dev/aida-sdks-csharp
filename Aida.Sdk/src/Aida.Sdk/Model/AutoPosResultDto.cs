/*
 * aida
 *
 * 1.0.700.1
 *
 * The version of the OpenAPI document: 1.0.700.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// AutoPosResultDto
    /// </summary>
    [DataContract(Name = "AutoPosResultDto")]
    public partial class AutoPosResultDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public AutoPosResultStatusCode? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoPosResultDto" /> class.
        /// </summary>
        /// <param name="success">success.</param>
        /// <param name="status">status.</param>
        /// <param name="pixelsPerMillimeterX">pixelsPerMillimeterX.</param>
        /// <param name="pixelsPerMillimeterY">pixelsPerMillimeterY.</param>
        /// <param name="offsetXMillimeters">offsetXMillimeters.</param>
        /// <param name="offsetYMillimeters">offsetYMillimeters.</param>
        /// <param name="cameraId">cameraId.</param>
        /// <param name="warpPerspective">warpPerspective.</param>
        /// <param name="acquisitionPresentName">acquisitionPresentName.</param>
        public AutoPosResultDto(bool success = default(bool), AutoPosResultStatusCode? status = default(AutoPosResultStatusCode?), double pixelsPerMillimeterX = default(double), double pixelsPerMillimeterY = default(double), double offsetXMillimeters = default(double), double offsetYMillimeters = default(double), string cameraId = default(string), bool warpPerspective = default(bool), string acquisitionPresentName = default(string))
        {
            this.Success = success;
            this.Status = status;
            this.PixelsPerMillimeterX = pixelsPerMillimeterX;
            this.PixelsPerMillimeterY = pixelsPerMillimeterY;
            this.OffsetXMillimeters = offsetXMillimeters;
            this.OffsetYMillimeters = offsetYMillimeters;
            this.CameraId = cameraId;
            this.WarpPerspective = warpPerspective;
            this.AcquisitionPresentName = acquisitionPresentName;
        }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Gets or Sets PixelsPerMillimeterX
        /// </summary>
        [DataMember(Name = "pixelsPerMillimeterX", EmitDefaultValue = false)]
        public double PixelsPerMillimeterX { get; set; }

        /// <summary>
        /// Gets or Sets PixelsPerMillimeterY
        /// </summary>
        [DataMember(Name = "pixelsPerMillimeterY", EmitDefaultValue = false)]
        public double PixelsPerMillimeterY { get; set; }

        /// <summary>
        /// Gets or Sets OffsetXMillimeters
        /// </summary>
        [DataMember(Name = "offsetXMillimeters", EmitDefaultValue = false)]
        public double OffsetXMillimeters { get; set; }

        /// <summary>
        /// Gets or Sets OffsetYMillimeters
        /// </summary>
        [DataMember(Name = "offsetYMillimeters", EmitDefaultValue = false)]
        public double OffsetYMillimeters { get; set; }

        /// <summary>
        /// Gets or Sets CameraId
        /// </summary>
        [DataMember(Name = "cameraId", EmitDefaultValue = true)]
        public string CameraId { get; set; }

        /// <summary>
        /// Gets or Sets WarpPerspective
        /// </summary>
        [DataMember(Name = "warpPerspective", EmitDefaultValue = true)]
        public bool WarpPerspective { get; set; }

        /// <summary>
        /// Gets or Sets AcquisitionPresentName
        /// </summary>
        [DataMember(Name = "acquisitionPresentName", EmitDefaultValue = true)]
        public string AcquisitionPresentName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutoPosResultDto {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PixelsPerMillimeterX: ").Append(PixelsPerMillimeterX).Append("\n");
            sb.Append("  PixelsPerMillimeterY: ").Append(PixelsPerMillimeterY).Append("\n");
            sb.Append("  OffsetXMillimeters: ").Append(OffsetXMillimeters).Append("\n");
            sb.Append("  OffsetYMillimeters: ").Append(OffsetYMillimeters).Append("\n");
            sb.Append("  CameraId: ").Append(CameraId).Append("\n");
            sb.Append("  WarpPerspective: ").Append(WarpPerspective).Append("\n");
            sb.Append("  AcquisitionPresentName: ").Append(AcquisitionPresentName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
