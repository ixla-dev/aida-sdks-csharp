/*
 * aida
 *
 * 1.0.703.1
 *
 * The version of the OpenAPI document: 1.0.703.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// WorkflowInstanceDto
    /// </summary>
    [DataContract(Name = "WorkflowInstanceDto")]
    public partial class WorkflowInstanceDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets WorkflowStatus
        /// </summary>
        [DataMember(Name = "workflowStatus", EmitDefaultValue = false)]
        public WorkflowStatus? WorkflowStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowInstanceDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="definitionId">definitionId.</param>
        /// <param name="definitionVersionId">definitionVersionId.</param>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="workflowStatus">workflowStatus.</param>
        /// <param name="correlationId">correlationId.</param>
        /// <param name="contextType">contextType.</param>
        /// <param name="contextId">contextId.</param>
        /// <param name="name">name.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="lastExecutedAt">lastExecutedAt.</param>
        /// <param name="finishedAt">finishedAt.</param>
        /// <param name="cancelledAt">cancelledAt.</param>
        /// <param name="faultedAt">faultedAt.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="currentActivityId">currentActivityId.</param>
        /// <param name="lastExecutedActivityId">lastExecutedActivityId.</param>
        /// <param name="currentActivityName">currentActivityName.</param>
        /// <param name="lastExecutedActivityName">lastExecutedActivityName.</param>
        /// <param name="stackTrace">stackTrace.</param>
        /// <param name="message">message.</param>
        public WorkflowInstanceDto(string id = default(string), string definitionId = default(string), string definitionVersionId = default(string), string tenantId = default(string), int varVersion = default(int), WorkflowStatus? workflowStatus = default(WorkflowStatus?), string correlationId = default(string), string contextType = default(string), string contextId = default(string), string name = default(string), DateTime? createdAt = default(DateTime?), DateTime? lastExecutedAt = default(DateTime?), DateTime? finishedAt = default(DateTime?), DateTime? cancelledAt = default(DateTime?), DateTime? faultedAt = default(DateTime?), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), string currentActivityId = default(string), string lastExecutedActivityId = default(string), string currentActivityName = default(string), string lastExecutedActivityName = default(string), string stackTrace = default(string), string message = default(string))
        {
            this.Id = id;
            this.DefinitionId = definitionId;
            this.DefinitionVersionId = definitionVersionId;
            this.TenantId = tenantId;
            this.VarVersion = varVersion;
            this.WorkflowStatus = workflowStatus;
            this.CorrelationId = correlationId;
            this.ContextType = contextType;
            this.ContextId = contextId;
            this.Name = name;
            this.CreatedAt = createdAt;
            this.LastExecutedAt = lastExecutedAt;
            this.FinishedAt = finishedAt;
            this.CancelledAt = cancelledAt;
            this.FaultedAt = faultedAt;
            this.Metadata = metadata;
            this.CurrentActivityId = currentActivityId;
            this.LastExecutedActivityId = lastExecutedActivityId;
            this.CurrentActivityName = currentActivityName;
            this.LastExecutedActivityName = lastExecutedActivityName;
            this.StackTrace = stackTrace;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets DefinitionId
        /// </summary>
        [DataMember(Name = "definitionId", EmitDefaultValue = true)]
        public string DefinitionId { get; set; }

        /// <summary>
        /// Gets or Sets DefinitionVersionId
        /// </summary>
        [DataMember(Name = "definitionVersionId", EmitDefaultValue = true)]
        public string DefinitionVersionId { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets CorrelationId
        /// </summary>
        [DataMember(Name = "correlationId", EmitDefaultValue = true)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Gets or Sets ContextType
        /// </summary>
        [DataMember(Name = "contextType", EmitDefaultValue = true)]
        public string ContextType { get; set; }

        /// <summary>
        /// Gets or Sets ContextId
        /// </summary>
        [DataMember(Name = "contextId", EmitDefaultValue = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /// <example>2019-12-10T10:06:50.466318Z</example>
        [DataMember(Name = "createdAt", EmitDefaultValue = true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets LastExecutedAt
        /// </summary>
        /// <example>2019-12-10T10:06:50.466318Z</example>
        [DataMember(Name = "lastExecutedAt", EmitDefaultValue = true)]
        public DateTime? LastExecutedAt { get; set; }

        /// <summary>
        /// Gets or Sets FinishedAt
        /// </summary>
        /// <example>2019-12-10T10:06:50.466318Z</example>
        [DataMember(Name = "finishedAt", EmitDefaultValue = true)]
        public DateTime? FinishedAt { get; set; }

        /// <summary>
        /// Gets or Sets CancelledAt
        /// </summary>
        /// <example>2019-12-10T10:06:50.466318Z</example>
        [DataMember(Name = "cancelledAt", EmitDefaultValue = true)]
        public DateTime? CancelledAt { get; set; }

        /// <summary>
        /// Gets or Sets FaultedAt
        /// </summary>
        /// <example>2019-12-10T10:06:50.466318Z</example>
        [DataMember(Name = "faultedAt", EmitDefaultValue = true)]
        public DateTime? FaultedAt { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets CurrentActivityId
        /// </summary>
        [DataMember(Name = "currentActivityId", EmitDefaultValue = true)]
        public string CurrentActivityId { get; set; }

        /// <summary>
        /// Gets or Sets LastExecutedActivityId
        /// </summary>
        [DataMember(Name = "lastExecutedActivityId", EmitDefaultValue = true)]
        public string LastExecutedActivityId { get; set; }

        /// <summary>
        /// Gets or Sets CurrentActivityName
        /// </summary>
        [DataMember(Name = "currentActivityName", EmitDefaultValue = true)]
        public string CurrentActivityName { get; set; }

        /// <summary>
        /// Gets or Sets LastExecutedActivityName
        /// </summary>
        [DataMember(Name = "lastExecutedActivityName", EmitDefaultValue = true)]
        public string LastExecutedActivityName { get; set; }

        /// <summary>
        /// Gets or Sets StackTrace
        /// </summary>
        [DataMember(Name = "stackTrace", EmitDefaultValue = true)]
        public string StackTrace { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowInstanceDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DefinitionId: ").Append(DefinitionId).Append("\n");
            sb.Append("  DefinitionVersionId: ").Append(DefinitionVersionId).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  WorkflowStatus: ").Append(WorkflowStatus).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  ContextType: ").Append(ContextType).Append("\n");
            sb.Append("  ContextId: ").Append(ContextId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  LastExecutedAt: ").Append(LastExecutedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  CancelledAt: ").Append(CancelledAt).Append("\n");
            sb.Append("  FaultedAt: ").Append(FaultedAt).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CurrentActivityId: ").Append(CurrentActivityId).Append("\n");
            sb.Append("  LastExecutedActivityId: ").Append(LastExecutedActivityId).Append("\n");
            sb.Append("  CurrentActivityName: ").Append(CurrentActivityName).Append("\n");
            sb.Append("  LastExecutedActivityName: ").Append(LastExecutedActivityName).Append("\n");
            sb.Append("  StackTrace: ").Append(StackTrace).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
