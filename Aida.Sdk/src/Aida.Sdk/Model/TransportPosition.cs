/*
 * aida
 *
 * 1.0.703.2
 *
 * The version of the OpenAPI document: 1.0.703.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// TransportPosition
    /// </summary>
    [DataContract(Name = "TransportPosition")]
    public partial class TransportPosition : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TransportPositionType
        /// </summary>
        [DataMember(Name = "transportPositionType", EmitDefaultValue = false)]
        public TransportPositionType? TransportPositionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportPosition" /> class.
        /// </summary>
        /// <param name="positionName">positionName.</param>
        /// <param name="moduleId">moduleId.</param>
        /// <param name="isAlias">isAlias.</param>
        /// <param name="realPosition">realPosition.</param>
        /// <param name="isMachineInput">isMachineInput.</param>
        /// <param name="isMachineExit">isMachineExit.</param>
        /// <param name="isFeeder">isFeeder.</param>
        /// <param name="isMultiChipExit">isMultiChipExit.</param>
        /// <param name="currentSupport">currentSupport.</param>
        /// <param name="aliases">aliases.</param>
        /// <param name="transportPositionType">transportPositionType.</param>
        /// <param name="connections">connections.</param>
        public TransportPosition(string positionName = default(string), int moduleId = default(int), bool isAlias = default(bool), string realPosition = default(string), bool isMachineInput = default(bool), bool isMachineExit = default(bool), bool isFeeder = default(bool), bool isMultiChipExit = default(bool), Support currentSupport = default(Support), List<TransportPosition> aliases = default(List<TransportPosition>), TransportPositionType? transportPositionType = default(TransportPositionType?), List<TransportPosition> connections = default(List<TransportPosition>))
        {
            this.PositionName = positionName;
            this.ModuleId = moduleId;
            this.IsAlias = isAlias;
            this.RealPosition = realPosition;
            this.IsMachineInput = isMachineInput;
            this.IsMachineExit = isMachineExit;
            this.IsFeeder = isFeeder;
            this.IsMultiChipExit = isMultiChipExit;
            this.CurrentSupport = currentSupport;
            this.Aliases = aliases;
            this.TransportPositionType = transportPositionType;
            this.Connections = connections;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets PositionName
        /// </summary>
        [DataMember(Name = "positionName", EmitDefaultValue = true)]
        public string PositionName { get; set; }

        /// <summary>
        /// Gets or Sets ModuleId
        /// </summary>
        [DataMember(Name = "moduleId", EmitDefaultValue = false)]
        public int ModuleId { get; set; }

        /// <summary>
        /// Gets or Sets IsAlias
        /// </summary>
        [DataMember(Name = "isAlias", EmitDefaultValue = true)]
        public bool IsAlias { get; set; }

        /// <summary>
        /// Gets or Sets RealPosition
        /// </summary>
        [DataMember(Name = "realPosition", EmitDefaultValue = true)]
        public string RealPosition { get; set; }

        /// <summary>
        /// Gets or Sets IsMachineInput
        /// </summary>
        [DataMember(Name = "isMachineInput", EmitDefaultValue = true)]
        public bool IsMachineInput { get; set; }

        /// <summary>
        /// Gets or Sets IsMachineExit
        /// </summary>
        [DataMember(Name = "isMachineExit", EmitDefaultValue = true)]
        public bool IsMachineExit { get; set; }

        /// <summary>
        /// Gets or Sets IsFeeder
        /// </summary>
        [DataMember(Name = "isFeeder", EmitDefaultValue = true)]
        public bool IsFeeder { get; set; }

        /// <summary>
        /// Gets or Sets IsMultiChipExit
        /// </summary>
        [DataMember(Name = "isMultiChipExit", EmitDefaultValue = true)]
        public bool IsMultiChipExit { get; set; }

        /// <summary>
        /// Gets or Sets IsTransient
        /// </summary>
        [DataMember(Name = "isTransient", EmitDefaultValue = true)]
        public bool IsTransient { get; private set; }

        /// <summary>
        /// Returns false as IsTransient should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsTransient()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsReject
        /// </summary>
        [DataMember(Name = "isReject", EmitDefaultValue = true)]
        public bool IsReject { get; private set; }

        /// <summary>
        /// Returns false as IsReject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsReject()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Occupied
        /// </summary>
        [DataMember(Name = "occupied", EmitDefaultValue = true)]
        public bool Occupied { get; private set; }

        /// <summary>
        /// Returns false as Occupied should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOccupied()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CurrentSupport
        /// </summary>
        [DataMember(Name = "currentSupport", EmitDefaultValue = false)]
        public Support CurrentSupport { get; set; }

        /// <summary>
        /// Gets or Sets Aliases
        /// </summary>
        [DataMember(Name = "aliases", EmitDefaultValue = true)]
        public List<TransportPosition> Aliases { get; set; }

        /// <summary>
        /// Gets or Sets IsFlip
        /// </summary>
        [DataMember(Name = "isFlip", EmitDefaultValue = true)]
        public bool IsFlip { get; private set; }

        /// <summary>
        /// Returns false as IsFlip should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsFlip()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Connections
        /// </summary>
        [DataMember(Name = "connections", EmitDefaultValue = true)]
        public List<TransportPosition> Connections { get; set; }

        /// <summary>
        /// Gets or Sets IsIntersection
        /// </summary>
        [DataMember(Name = "isIntersection", EmitDefaultValue = true)]
        public bool IsIntersection { get; private set; }

        /// <summary>
        /// Returns false as IsIntersection should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsIntersection()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransportPosition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PositionName: ").Append(PositionName).Append("\n");
            sb.Append("  ModuleId: ").Append(ModuleId).Append("\n");
            sb.Append("  IsAlias: ").Append(IsAlias).Append("\n");
            sb.Append("  RealPosition: ").Append(RealPosition).Append("\n");
            sb.Append("  IsMachineInput: ").Append(IsMachineInput).Append("\n");
            sb.Append("  IsMachineExit: ").Append(IsMachineExit).Append("\n");
            sb.Append("  IsFeeder: ").Append(IsFeeder).Append("\n");
            sb.Append("  IsMultiChipExit: ").Append(IsMultiChipExit).Append("\n");
            sb.Append("  IsTransient: ").Append(IsTransient).Append("\n");
            sb.Append("  IsReject: ").Append(IsReject).Append("\n");
            sb.Append("  Occupied: ").Append(Occupied).Append("\n");
            sb.Append("  CurrentSupport: ").Append(CurrentSupport).Append("\n");
            sb.Append("  Aliases: ").Append(Aliases).Append("\n");
            sb.Append("  TransportPositionType: ").Append(TransportPositionType).Append("\n");
            sb.Append("  IsFlip: ").Append(IsFlip).Append("\n");
            sb.Append("  Connections: ").Append(Connections).Append("\n");
            sb.Append("  IsIntersection: ").Append(IsIntersection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
