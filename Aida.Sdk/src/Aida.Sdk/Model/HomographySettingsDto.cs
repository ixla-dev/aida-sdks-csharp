/*
 * aida
 *
 * 1.0.704.0
 *
 * The version of the OpenAPI document: 1.0.704.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// HomographySettingsDto
    /// </summary>
    [DataContract(Name = "HomographySettingsDto")]
    public partial class HomographySettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HomographySettingsDto" /> class.
        /// </summary>
        /// <param name="cameraId">cameraId.</param>
        /// <param name="pixelsPerMillimeterX">pixelsPerMillimeterX.</param>
        /// <param name="pixelsPerMillimeterY">pixelsPerMillimeterY.</param>
        /// <param name="unwarpPerspectiveOutputSizeX">unwarpPerspectiveOutputSizeX.</param>
        /// <param name="unwarpPerspectiveOutputSizeY">unwarpPerspectiveOutputSizeY.</param>
        /// <param name="dstPoints">dstPoints.</param>
        /// <param name="srcPoints">srcPoints.</param>
        /// <param name="homographyMatrix">homographyMatrix.</param>
        /// <param name="inverseHomography">inverseHomography.</param>
        public HomographySettingsDto(string cameraId = default(string), float pixelsPerMillimeterX = default(float), float pixelsPerMillimeterY = default(float), float unwarpPerspectiveOutputSizeX = default(float), float unwarpPerspectiveOutputSizeY = default(float), List<Point2fDto> dstPoints = default(List<Point2fDto>), List<Point2fDto> srcPoints = default(List<Point2fDto>), List<float> homographyMatrix = default(List<float>), List<float> inverseHomography = default(List<float>))
        {
            this.CameraId = cameraId;
            this.PixelsPerMillimeterX = pixelsPerMillimeterX;
            this.PixelsPerMillimeterY = pixelsPerMillimeterY;
            this.UnwarpPerspectiveOutputSizeX = unwarpPerspectiveOutputSizeX;
            this.UnwarpPerspectiveOutputSizeY = unwarpPerspectiveOutputSizeY;
            this.DstPoints = dstPoints;
            this.SrcPoints = srcPoints;
            this.HomographyMatrix = homographyMatrix;
            this.InverseHomography = inverseHomography;
        }

        /// <summary>
        /// Gets or Sets CameraId
        /// </summary>
        [DataMember(Name = "cameraId", EmitDefaultValue = true)]
        public string CameraId { get; set; }

        /// <summary>
        /// Gets or Sets PixelsPerMillimeterX
        /// </summary>
        [DataMember(Name = "pixelsPerMillimeterX", EmitDefaultValue = false)]
        public float PixelsPerMillimeterX { get; set; }

        /// <summary>
        /// Gets or Sets PixelsPerMillimeterY
        /// </summary>
        [DataMember(Name = "pixelsPerMillimeterY", EmitDefaultValue = false)]
        public float PixelsPerMillimeterY { get; set; }

        /// <summary>
        /// Gets or Sets UnwarpPerspectiveOutputSizeX
        /// </summary>
        [DataMember(Name = "unwarpPerspectiveOutputSizeX", EmitDefaultValue = false)]
        public float UnwarpPerspectiveOutputSizeX { get; set; }

        /// <summary>
        /// Gets or Sets UnwarpPerspectiveOutputSizeY
        /// </summary>
        [DataMember(Name = "unwarpPerspectiveOutputSizeY", EmitDefaultValue = false)]
        public float UnwarpPerspectiveOutputSizeY { get; set; }

        /// <summary>
        /// Gets or Sets DstPoints
        /// </summary>
        [DataMember(Name = "dstPoints", EmitDefaultValue = true)]
        public List<Point2fDto> DstPoints { get; set; }

        /// <summary>
        /// Gets or Sets SrcPoints
        /// </summary>
        [DataMember(Name = "srcPoints", EmitDefaultValue = true)]
        public List<Point2fDto> SrcPoints { get; set; }

        /// <summary>
        /// Gets or Sets HomographyMatrix
        /// </summary>
        [DataMember(Name = "homographyMatrix", EmitDefaultValue = true)]
        public List<float> HomographyMatrix { get; set; }

        /// <summary>
        /// Gets or Sets InverseHomography
        /// </summary>
        [DataMember(Name = "inverseHomography", EmitDefaultValue = true)]
        public List<float> InverseHomography { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HomographySettingsDto {\n");
            sb.Append("  CameraId: ").Append(CameraId).Append("\n");
            sb.Append("  PixelsPerMillimeterX: ").Append(PixelsPerMillimeterX).Append("\n");
            sb.Append("  PixelsPerMillimeterY: ").Append(PixelsPerMillimeterY).Append("\n");
            sb.Append("  UnwarpPerspectiveOutputSizeX: ").Append(UnwarpPerspectiveOutputSizeX).Append("\n");
            sb.Append("  UnwarpPerspectiveOutputSizeY: ").Append(UnwarpPerspectiveOutputSizeY).Append("\n");
            sb.Append("  DstPoints: ").Append(DstPoints).Append("\n");
            sb.Append("  SrcPoints: ").Append(SrcPoints).Append("\n");
            sb.Append("  HomographyMatrix: ").Append(HomographyMatrix).Append("\n");
            sb.Append("  InverseHomography: ").Append(InverseHomography).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
