/*
 * aida
 *
 * 1.0.703.2
 *
 * The version of the OpenAPI document: 1.0.703.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// SamlightOpticSettingsDto
    /// </summary>
    [DataContract(Name = "SamlightOpticSettingsDto")]
    public partial class SamlightOpticSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SamlightOpticSettingsDto" /> class.
        /// </summary>
        /// <param name="applyDefaultOffsets">applyDefaultOffsets.</param>
        /// <param name="defaultOffsetX">defaultOffsetX.</param>
        /// <param name="defaultOffsetY">defaultOffsetY.</param>
        /// <param name="defaultGainX">defaultGainX.</param>
        /// <param name="defaultGainY">defaultGainY.</param>
        public SamlightOpticSettingsDto(bool? applyDefaultOffsets = default(bool?), double? defaultOffsetX = default(double?), double? defaultOffsetY = default(double?), double? defaultGainX = default(double?), double? defaultGainY = default(double?))
        {
            this.ApplyDefaultOffsets = applyDefaultOffsets;
            this.DefaultOffsetX = defaultOffsetX;
            this.DefaultOffsetY = defaultOffsetY;
            this.DefaultGainX = defaultGainX;
            this.DefaultGainY = defaultGainY;
        }

        /// <summary>
        /// Gets or Sets ApplyDefaultOffsets
        /// </summary>
        [DataMember(Name = "applyDefaultOffsets", EmitDefaultValue = true)]
        public bool? ApplyDefaultOffsets { get; set; }

        /// <summary>
        /// Gets or Sets DefaultOffsetX
        /// </summary>
        [DataMember(Name = "defaultOffsetX", EmitDefaultValue = true)]
        public double? DefaultOffsetX { get; set; }

        /// <summary>
        /// Gets or Sets DefaultOffsetY
        /// </summary>
        [DataMember(Name = "defaultOffsetY", EmitDefaultValue = true)]
        public double? DefaultOffsetY { get; set; }

        /// <summary>
        /// Gets or Sets DefaultGainX
        /// </summary>
        [DataMember(Name = "defaultGainX", EmitDefaultValue = true)]
        public double? DefaultGainX { get; set; }

        /// <summary>
        /// Gets or Sets DefaultGainY
        /// </summary>
        [DataMember(Name = "defaultGainY", EmitDefaultValue = true)]
        public double? DefaultGainY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SamlightOpticSettingsDto {\n");
            sb.Append("  ApplyDefaultOffsets: ").Append(ApplyDefaultOffsets).Append("\n");
            sb.Append("  DefaultOffsetX: ").Append(DefaultOffsetX).Append("\n");
            sb.Append("  DefaultOffsetY: ").Append(DefaultOffsetY).Append("\n");
            sb.Append("  DefaultGainX: ").Append(DefaultGainX).Append("\n");
            sb.Append("  DefaultGainY: ").Append(DefaultGainY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
